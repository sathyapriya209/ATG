#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.2 effective-4.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef AIROHA1562_SWIFT_H
#define AIROHA1562_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Airoha1562",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum AncMode : NSInteger;

/// <ul>
///   <li>
///     Anc status definition
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156217AirohaAncSettings")
@interface AirohaAncSettings : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// <ul>
///   <li>
///     0 - OFF;
///   </li>
///   <li>
///     1 - ANC1;
///   </li>
///   <li>
///     2 - ANC2;
///   </li>
///   <li>
///     3 - ANC3;
///   </li>
///   <li>
///     4 - PassThrough1;
///   </li>
///   <li>
///     5 - PassThrough2;
///   </li>
///   <li>
///     6 - PassThrough3;
///   </li>
///   <li>
///     7 - ANC4; // AB155x not support
///   </li>
/// </ul>
/// \param filter anc or passthru filter
///
- (void)setFilterWithFilter:(NSInteger)filter;
/// \param gain anc or passthru gain
///
- (void)setGainWithGain:(double)gain;
/// <ul>
///   <li>
///     filter:
///   </li>
///   <li>
///     0 - OFF;
///   </li>
///   <li>
///     1 - ANC1;
///   </li>
///   <li>
///     2 - ANC2;
///   </li>
///   <li>
///     3 - ANC3;
///   </li>
///   <li>
///     4 - PassThrough1;
///   </li>
///   <li>
///     5 - PassThrough2;
///   </li>
///   <li>
///     6 - PassThrough3;
///   </li>
///   <li>
///     7 - ANC4; // AB155x not support
///   </li>
/// </ul>
- (NSInteger)getFilter SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     gain: for specified filter, 0 by default.
///   </li>
/// </ul>
- (double)getGain SWIFT_WARN_UNUSED_RESULT;
- (void)setAncGainWithGain:(double)gain;
/// <ul>
///   <li>
///     get current anc gain
///   </li>
/// </ul>
- (double)getAncGain SWIFT_WARN_UNUSED_RESULT;
- (void)setPassthruGainWithGain:(double)gain;
/// <ul>
///   <li>
///     get current passthru gain
///   </li>
/// </ul>
- (double)getPassthruGain SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// <code>AncMode</code> the anc filter will use hybrid, ff or fb mode. This value only valid in setAncSetting API when filter is anc.
- (enum AncMode)getAncMode SWIFT_WARN_UNUSED_RESULT;
/// \param ancMode the anc filter will use hybrid, ff or fb mode. This value only valid in setAncSetting API when filter is anc.
///
- (void)setAncModeWithMode:(enum AncMode)mode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// Anc mode enum
typedef SWIFT_ENUM(NSInteger, AncMode, open) {
  AncModeHybrid = 0,
  AncModeFF = 1,
  AncModeFB = 2,
};

enum AirohaMessageID : NSInteger;

/// <ul>
///   <li>
///     Message is similar with command but it’s used on high-level application layer.
///   </li>
///   <li>
///   </li>
///   <li>
///     Message can be delivered by a single command, like most of commands; and also can be
///   </li>
///   <li>
///     delivered by multiple commands like DeviceInfo returned from device.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156213AirohaBaseMsg")
@interface AirohaBaseMsg : NSObject
/// <ul>
///   <li>
///     Initialize with message id and message content
///   </li>
/// </ul>
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push OBJC_DESIGNATED_INITIALIZER;
/// Message ID definition.
///
/// returns:
/// <code>AirohaMessageID</code>
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
/// Different message will contain different types of content.
///
/// returns:
/// NSObject.
- (NSObject * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
/// Check if message pushed from device.
///
/// returns:
/// true pushed from device, is not response to app request; otherwise indicates this message is response to app request.
- (BOOL)isPush SWIFT_WARN_UNUSED_RESULT;
- (void)setPushWithPush:(BOOL)push;
/// \param messageId <code>AirohaMessageID</code>
///
- (void)setMessageIdWithMessageId:(enum AirohaMessageID)messageId;
/// \param msgContent NSObject
///
- (void)setMsgContentWithMsgContent:(NSObject * _Nonnull)msgContent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSArray;

/// <ul>
///   <li>
///     Message to describe anc status info list
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156218AirohaAncStatusMsg")
@interface AirohaAncStatusMsg : AirohaBaseMsg
- (nonnull instancetype)initWithAncSettingsList:(NSArray<AirohaAncSettings *> * _Nonnull)ancSettingsList OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AirohaAudioChannel, open) {
  AirohaAudioChannelUNKNOWN = -1,
  AirohaAudioChannelNONE_CHANNEL = 0,
  AirohaAudioChannelSTEREO_LEFT = 1,
  AirohaAudioChannelSTEREO_RIGHT = 2,
};


SWIFT_CLASS("_TtC10Airoha156222AirohaAudioChannelInfo")
@interface AirohaAudioChannelInfo : NSObject
- (enum AirohaAudioChannel)getChannel SWIFT_WARN_UNUSED_RESULT;
- (void)setChannelWithAudioChannel:(enum AirohaAudioChannel)audioChannel;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AirohaDeviceListener;

/// <ul>
///   <li>
///     General device control API.
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP10Airoha156217AirohaBaseControl_")
@protocol AirohaBaseControl
/// Register global listener to device status and EQ update/info receive. Changes triggered from device should be notified by callback.
/// Such as change/get about ANC, AA, Auto Pause, Auto Off, and so on.
/// \param listener register global listener
///
- (void)registerGlobalListenerWithListener:(id <AirohaDeviceListener> _Nonnull)listener;
/// Unregister global listener to device status change.
/// \param listener unregister global listener
///
- (void)unregisterGlobalListenerWithListener:(id <AirohaDeviceListener> _Nonnull)listener;
@end



/// <ul>
///   <li>
///     Airoha Battery info
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156217AirohaBatteryInfo")
@interface AirohaBatteryInfo : NSObject
/// Get master battery level.
///
/// returns:
/// Int, the battery percentage of agent device
- (NSInteger)getMasterLevel SWIFT_WARN_UNUSED_RESULT;
- (void)setMasterLevelWithMasterLevel:(NSInteger)masterLevel;
/// Get slave level
///
/// returns:
/// Int the battery percentage of slave battery level, -1 means invalid value.
- (NSInteger)getSlaveLevel SWIFT_WARN_UNUSED_RESULT;
- (void)setSlaveLevelWithSlaveLevel:(NSInteger)slaveLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// enum AirohaConnectStatus
/// onInitialized: the status will delegate after sdk finished initial query device chip type. User should control device after received this status.
typedef SWIFT_ENUM(NSInteger, AirohaConnectStatus, open) {
  AirohaConnectStatusConnecting = 0,
  AirohaConnectStatusConnected = 1,
  AirohaConnectStatusDisconnecting = 2,
  AirohaConnectStatusDisconnected = 3,
  AirohaConnectStatusConnectFail = 4,
  AirohaConnectStatusConnectTimeout = 5,
  AirohaConnectStatusOnInitialized = 6,
  AirohaConnectStatusInitializationFail = 7,
};


/// <ul>
///   <li>
///     The delegates for connect status changed and received data from device
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP10Airoha156224AirohaConnectionListener_")
@protocol AirohaConnectionListener
/// Callback when device connection status changed.
/// <ul>
///   <li>
///     parameters status: The enum value of AirohaConnectStatus
///   </li>
/// </ul>
- (void)onStatusChangedWithStatus:(NSInteger)status;
/// Callback when message received from device.
- (void)onDataReceivedWithDeviceMessage:(AirohaBaseMsg * _Nonnull)deviceMessage;
@optional
/// Callback when raw data received from device.
/// <ul>
///   <li>
///     parameters rawData: bytes array data received from device
///   </li>
/// </ul>
- (void)onDataReceivedWithRawData:(NSData * _Nonnull)rawData;
@end

@class CentralManagerDelegateWrapper;
@class PeripheralDelegateWrapper;
@class CBCentralManager;
enum AirohaDeviceProtocol : NSInteger;
@class AirohaDevice;

/// Device connector (singleton). Used to maintain a GATT connection / iap2 session with device.
/// Connection Flow (GATT):
/// Step1: UI scan and get peripheral and manuf data (manu data is not needed when gatt over edr)
/// Step2: new AirohaDevice() and set peripheral identifier and manuf data to airoha device
/// Step3: connect and registerListener
/// Step4: Sdk will delegate AirohaConnectStatus.connected then AirohaConnectStatus.onInitialized. After received onInitialized, user can control airoha device.
/// iap2 session:
/// Step1: UI search accessory
/// Step2: new AirohaDevice() and set EAAccessory, protocol string, and iap2 preferredProtocol to airoha device
/// Step3: connect and registerListener
/// Step4: Sdk will delegate AirohaConnectStatus.connected then AirohaConnectStatus.onInitialized. After received onInitialized, user can control airoha device.
/// Note: Sdk will delegate AirohaConnectStatus.Disconnected when connection/session closed.
SWIFT_CLASS("_TtC10Airoha156215AirohaConnector")
@interface AirohaConnector : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AirohaConnector * _Nonnull Inst;)
+ (AirohaConnector * _Nonnull)Inst SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) CentralManagerDelegateWrapper * _Nonnull managerDelegateWrapper;
@property (nonatomic, readonly, strong) PeripheralDelegateWrapper * _Nonnull peripheralDelegateWrapper;
@property (nonatomic, strong) CBCentralManager * _Nonnull manager;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Get all supported protocols (int value combination).
///
/// returns:
/// 0x00000001 (Ble)
- (NSInteger)getSupportedProtocols SWIFT_WARN_UNUSED_RESULT;
/// Check if specific device protocol is supported or not. One device connector implementation can support multiple protocols.
- (BOOL)isProtocolSupportedWithDeviceProtocol:(enum AirohaDeviceProtocol)deviceProtocol SWIFT_WARN_UNUSED_RESULT;
/// Get AirohaDevice, for which we are trying to connect with.
///
/// returns:
/// the device we are trying to connect with
- (AirohaDevice * _Nullable)getDevice SWIFT_WARN_UNUSED_RESULT;
/// Connect to the device.
- (void)connectWithDevice:(AirohaDevice * _Nonnull)device;
/// Connect to the device with App or 3rd party central managed the CoreBluetooth evt.
- (void)connectUnmanagedWithDevice:(AirohaDevice * _Nonnull)device;
/// Connect to the device and register listener.
- (void)connectWithDevice:(AirohaDevice * _Nonnull)device connectionListener:(id <AirohaConnectionListener> _Nonnull)connectionListener;
/// Connect to the device and register listener with App or 3rd party central managed the CoreBluetooth evt..
- (void)connectUnmanagedWithDevice:(AirohaDevice * _Nonnull)device connectionListener:(id <AirohaConnectionListener> _Nonnull)connectionListener;
/// Disconnect from the device.
- (void)disconnect;
/// Register a listener.
/// \param connectionListener register connect status changed and data received from device
///
- (void)registerConnectionListenerWithConnectionListener:(id <AirohaConnectionListener> _Nonnull)connectionListener;
/// Unregister a listener.
/// \param connectionListener unregister listener
///
- (void)unregisterConnectionListenerWithConnectionListener:(id <AirohaConnectionListener> _Nonnull)connectionListener;
/// sendCustomCommand - If customer define new command for their project, there is a way to send a customize command of raw data.
/// warning:
/// Airoha defualt write command uuid: “43484152-2DAB-3241-6972-6F6861424C45”, if your project change the write uuid, please using your uuid
/// \param charUUID characteristic uuid string for wirte data.
///
/// \param data raw data for customer defined command.
///
///
/// returns:
/// if device have result return, library will delegate AirohaConnectionListener::onDataReceived(rawData: Data)
- (void)sendCustomCommandWithCharUUID:(NSString * _Nonnull)charUUID data:(NSData * _Nonnull)data;
/// getClassicMacAddr - Get classic mac address of the device that connected on iphone
/// warning:
/// Get the address from input and output audio route. This API is not a formal way to get classic bt address. It may be deprecated in the future.
///
/// returns:
/// string array of address list or nil represent not found
- (NSArray<NSString *> * _Nullable)getClassicMacAddr SWIFT_WARN_UNUSED_RESULT;
@end

enum FlashSize : NSInteger;

/// AirohaDFUInfo
/// After invoked requestDfuInfo (sync API), lib will return AirohaDFUInfo object that contains the information of fota state, fw version, agent channel, rofs version, flash size
SWIFT_CLASS("_TtC10Airoha156213AirohaDFUInfo")
@interface AirohaDFUInfo : NSObject
@property (nonatomic, readonly) BOOL isReadyToUpdateFileSystem;
@property (nonatomic, readonly, copy) NSString * _Nonnull agentFwVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull partnerFwVersion;
@property (nonatomic, readonly) BOOL isAgentRightChannel;
@property (nonatomic, readonly) BOOL isPartnerRightChannel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFotaState:(uint16_t)fotaState fwVersion:(NSString * _Nonnull)fwVersion flashSize:(enum FlashSize)flashSize isReadyToUpdateFileSystem:(BOOL)isReadyToUpdateFileSystem OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use getFwVersion instead");
- (NSString * _Nonnull)getFwVersion SWIFT_WARN_UNUSED_RESULT;
- (enum FlashSize)getFlashSize SWIFT_WARN_UNUSED_RESULT;
- (void)copyFrom:(AirohaDFUInfo * _Nonnull)from;
- (void)reset;
@end

typedef SWIFT_ENUM(NSInteger, FotaStage, open) {
  FotaStageReadyToStart = 0,
  FotaStageReadyToApply = 1,
  FotaStageNeedSpecialUpgrade = 2,
};

typedef SWIFT_ENUM(NSInteger, FlashSize, open) {
  FlashSizeFLASH_2M = 0,
  FlashSizeFLASH_4M = 1,
  FlashSizeUNKNOWN = 2,
};

enum AirohaDeviceRole : NSInteger;
@class CBPeripheral;
@class EAAccessory;

/// AirohaDevice:
/// <ol>
///   <li>
///     A parameter in AirohaConnector::connect to specific the device to connect.
///     <ol>
///       <li>
///         if using ble, user has to set peripheral uuid and manufactuerData at first before connecting ble.
///       </li>
///       <li>
///         if using gatt over edr, user has to set peripheral uuid at first before connecting gatt over edr.
///       </li>
///       <li>
///         If using iap2, user has to set accessory and protocolString at first before making iap2 session.
///       </li>
///     </ol>
///   </li>
///   <li>
///     The callback value in AirohaDeviceControl::getDeviceInfo API.
///     After the API calls, product/vendor id, MAC address, …etc information will be included in AirohaDevice.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC10Airoha156212AirohaDevice")
@interface AirohaDevice : NSObject
/// Set device vendor id.
- (void)setDeviceVidWithDeviceVid:(NSString * _Nonnull)deviceVid;
/// Get device vendor id.
///
/// returns:
/// String, device vendor id
- (NSString * _Nonnull)getDeviceVid SWIFT_WARN_UNUSED_RESULT;
/// Set device product id.
- (void)setDevicePidWithDevicePid:(NSString * _Nonnull)devicePid;
/// Get device product id.
///
/// returns:
/// String, device product id
- (NSString * _Nonnull)getDevicePid SWIFT_WARN_UNUSED_RESULT;
/// Set device model id.
- (void)setDeviceMidWithDeviceMid:(NSString * _Nonnull)deviceMid;
/// Get device model ID.
///
/// returns:
/// String, device model id
- (NSString * _Nonnull)getDeviceMid SWIFT_WARN_UNUSED_RESULT;
/// Set device MAC address.
- (void)setDeviceMACWithDeviceMAC:(NSString * _Nonnull)deviceMAC;
/// Get MAC address of the device.
///
/// returns:
/// String, device MAC address
- (NSString * _Nonnull)getDeviceMAC SWIFT_WARN_UNUSED_RESULT;
/// Set BLE address.
- (void)setBleAddressWithBleAddress:(NSString * _Nonnull)bleAddress;
/// Get ble address of the device
///
/// returns:
/// String, Ble address. This field is empty because we can not get ble address currently.
- (NSString * _Nonnull)getBleAddress SWIFT_WARN_UNUSED_RESULT;
/// Set device name
- (void)setDeviceNameWithDeviceName:(NSString * _Nonnull)deviceName;
/// Get device name.
///
/// returns:
/// String, device name
- (NSString * _Nonnull)getDeviceName SWIFT_WARN_UNUSED_RESULT;
/// Set battery info.
- (void)setBatteryLevelWithBatteryLevel:(NSInteger)batteryLevel;
/// Get device (master) battery info
/// CAUTION: Please use getBatteryInfo API instead.
///
/// returns:
///
- (NSInteger)getBatteryLevel SWIFT_WARN_UNUSED_RESULT;
/// Set device role.
- (void)setRoleWithRole:(enum AirohaDeviceRole)role;
/// Get device role.
///
/// returns:
/// AirohaDeviceRole
- (enum AirohaDeviceRole)getRole SWIFT_WARN_UNUSED_RESULT;
/// Set connectable.
- (void)setConnectableWithConnectable:(BOOL)connectable;
/// Check if the device is connectable or not.
///
/// returns:
/// Bool
- (BOOL)isConnectable SWIFT_WARN_UNUSED_RESULT;
/// Set device scanned timestamp.
- (void)setScannedTimestampWithScannedTimestamp:(NSInteger)scannedTimestamp;
/// Get device scanned timestamp.
///
/// returns:
/// CLong, it is 0 currently
- (long)getScannedTimestamp SWIFT_WARN_UNUSED_RESULT;
/// Set CRC.
- (void)setCrcWithCrc:(NSString * _Nonnull)crc;
/// Get CRC included from device broadcast.
///
/// returns:
/// String, it is empty currently
- (NSString * _Nonnull)getCrc SWIFT_WARN_UNUSED_RESULT;
/// Set preferred protocol.
/// \param preferredProtocol AirohaDeviceProtocol, currently support ble or iap2
///
- (void)setPreferredProtocolWithPreferredProtocol:(enum AirohaDeviceProtocol)preferredProtocol;
/// Get preferred connection protocol.
- (enum AirohaDeviceProtocol)getPreferredProtocol SWIFT_WARN_UNUSED_RESULT;
/// Set device uid.
- (void)setDeviceUidWithDeviceUid:(NSString * _Nonnull)deviceUid;
/// Convert to a string, can be used as UID of this AirohaDevice.
/// Example: VID+PID+MAC+PROTOCOL.
///
/// returns:
/// String, it is empty currently
- (NSString * _Nonnull)getDeviceUid SWIFT_WARN_UNUSED_RESULT;
/// Set device firmware version.
- (void)setFirmwareVerWithFirmwareVer:(NSString * _Nonnull)firmwareVer;
/// Get device firmware version
///
/// returns:
/// String, fw version
- (NSString * _Nonnull)getFirmwareVer SWIFT_WARN_UNUSED_RESULT;
/// Set audio channel.
- (void)setChannelWithChannel:(enum AirohaAudioChannel)channel;
/// Get current channel
///
/// returns:
/// AirohaAudioChannel, left or right
- (enum AirohaAudioChannel)getChannel SWIFT_WARN_UNUSED_RESULT;
/// Set device peripheral which is the necesaary information for BLE connection.
/// \param peripheral device peripheral from scanning or retrieving.
///
- (void)setPeripheralWithPeripheral:(CBPeripheral * _Nullable)peripheral SWIFT_DEPRECATED_MSG("Please use setPeripheralID instead");
/// Get device peripheral which is the necesaary information for BLE connection.
- (CBPeripheral * _Nullable)getPeripheral SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use getPeripheralID instead");
/// Set device peripheral UUID which is the necesaary information for BLE connection.
/// \param id device peripheral identifier from scanning or retrieving.
///
- (void)setPeripheralID:(NSUUID * _Nonnull)id;
/// Get device peripheral UUID which is the necesaary information for BLE connection.
- (NSUUID * _Nonnull)getPeripheralID SWIFT_WARN_UNUSED_RESULT;
/// Set manufacturing data from ble scan which is used to fota reconnection.
/// \param data manufacturing data used to idendify the original device when reconnection.
///
- (void)setManufactuerDataWithData:(NSData * _Nullable)data;
/// Get manufacturing data from ble scan which is used to fota reconnection.
- (NSData * _Nullable)getManufactuerData SWIFT_WARN_UNUSED_RESULT;
/// Set device accessory which is the necesaary information for IAP2 session estainbulish.
/// \param accessory device accessory for using iap2 channel
///
- (void)setEAAccessoryWithAccessory:(EAAccessory * _Nullable)accessory;
/// Get device accessory which is the necesaary information for IAP2 session estainbulish.
- (EAAccessory * _Nullable)getEAAccessory SWIFT_WARN_UNUSED_RESULT;
/// Set session protocol string which is the necesaary information for IAP2 session estainbulish.
/// \param protocolString protocol string
///
- (void)setProtocolStringWithProtocolString:(NSString * _Nonnull)protocolString;
/// Get session protocol string which is the necesaary information for IAP2 session estainbulish.
- (NSString * _Nonnull)getProtocolString SWIFT_WARN_UNUSED_RESULT;
/// Set mtu size.
- (void)setMtuSizeWithMtuSize:(NSInteger)mtuSize;
/// Get mtu size.
///
/// returns:
/// Int, mtu size
- (NSInteger)getMtuSize SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AirohaMyBudsInfo;
@class AirohaGestureInfo;
@class SideToneInfo;

SWIFT_PROTOCOL("_TtP10Airoha156219AirohaDeviceControl_")
@protocol AirohaDeviceControl <AirohaBaseControl>
/// Get all the device info as AirohaDevice.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code: in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg:  in deviceCallback is an object of <code>AirohaDeviceInfoMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.DEVICE_INFO</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> should be an array of <code>AirohaDevice</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getDeviceInfoWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set device name.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.DEVICE_NAME</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> type is Bool, true means success.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param name the device name to be renewed
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setDeviceNameWithName:(NSString * _Nonnull)name listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get enable ANC.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaAncStatusMsg</code>, which
///     <ul>
///       <li>
///         AirohaAncStatusMsg#getMsgID() is <code>AirohaMessageID.ANC_STATUS</code>,
///       </li>
///       <li>
///         AirohaAncStatusMsg#getMsgContent() includes enabled ANC setting.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getAncSettingWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set enable ANC status
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaAncStatusMsg</code>, which
///     <ul>
///       <li>
///         AirohaAncStatusMsg#getMsgID() is <code>AirohaMessageID.ANC_STATUS</code>,
///       </li>
///       <li>
///         AirohaAncStatusMsg#getMsgContent() only includes new changed Anc setting.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param anc new ANC setting
///
/// \param saveOrNot true save current AncSetting, otherwise only set current AncSetting.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setAncSettingWithAnc:(AirohaAncSettings * _Nonnull)anc saveOrNot:(BOOL)saveOrNot listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get AutoPause status, false for OFF, true for ON.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.AUTO_PAUSE</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is the current AutoPause status, type is Bool, value can be:
///         <ul>
///           <li>
///             true – ON
///           </li>
///           <li>
///             false – OFF
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getAutoPlayPauseStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set Auto Play Pause. Means if detected device is taken off, it should auto pause or not.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.AUTO_PAUSE</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is the new AutoPause status, type is Bool, value can be:
///         <ul>
///           <li>
///             true – ON
///           </li>
///           <li>
///             false – OFF
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param enableOrNot new AutoPause status.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setAutoPlayPauseStatusWithEnableOrNot:(BOOL)enableOrNot listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get auto power off status: 0 means disable, non 0 means ON and the value is Auto Power Off interval,
/// means the device should auto power off for some condition, for example, no music playing for some time,
/// and so on.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.AUTO_POWER_OFF</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is the current AutoPause status, type is Int, value can be:
///         <ul>
///           <li>
///             0 for OFF
///           </li>
///           <li>
///             other Non-zero means On and and the value is AutoOff interval. Means the device should auto power off for some condition, for example, no music playing for some time, and so on.
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getAutoPowerOffStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set auto power off status.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.AUTO_PAUSE</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is the new AutoPause status, type is Int, value can be:
///         <ul>
///           <li>
///             0 for OFF
///           </li>
///           <li>
///             other Non-zero means On and and the value is AutoOff interval. Means the device should auto power off for some condition, for example, no music playing for some time, and so on.
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param autoPowerOff 0 means Off, non 0 means ON and the value is Auto Power Off interval, unit minute. max value 360 minutes.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setAutoPowerOffStatusWithAutoPowerOff:(NSInteger)autoPowerOff listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get Multi-AI status, which one is currently activated.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.MULTI_AI_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current AI value, type is Int, value can be:
///         <ul>
///           <li>
///             1 for Google AI;
///           </li>
///           <li>
///             2 for Amazon Alexa;
///           </li>
///           <li>
///             3 for SIRI;
///           </li>
///           <li>
///             4 for Tecent XiaoWei;
///           </li>
///           <li>
///             5 for XiaoAi;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getMultiAIStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set Multi-AI status
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.MULTI_AI_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is new AI value, type is Integer, value can be:
///         <ul>
///           <li>
///             1 for Google AI;
///           </li>
///           <li>
///             2 for Amazon Alexa;
///           </li>
///           <li>
///             3 for SIRI;
///           </li>
///           <li>
///             4 for Tecent XiaoWei;
///           </li>
///           <li>
///             5 for XiaoAi;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param ai 
/// 1 for Google AI;
/// 2 for Amazon Alexa;
/// 3 for SIRI;
/// 4 for Tecent XiaoWei;
/// 5 for XiaoAi.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setMultiAIStatusWithAi:(NSInteger)ai listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get FindMyBuds setting.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaMyBudsMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaMyBudsMsg#getMsgID()</code> is <code>AirohaMessageID.FIND_ME_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaMyBudsMsg#getMsgContent()</code> is current MyBuds status, which type is <code>AirohaMyBudsInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getFindMyBudsWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set FindMyBuds settings.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
/// </ul>
/// \param myBudsInfo AirohaMyBudsInfo
///
/// \param listener local listener. If nil, then only callback to global listener
///
/// \param msg in deviceCallback is an object of <code>AirohaMyBudsMsg</code>, which
/// <ul>
///   <li>
///     <code>AirohaMyBudsMsg#getMsgID()</code> is <code>AirohaMessageID.FIND_ME_STATUS</code>,
///   </li>
///   <li>
///     <code>AirohaMyBudsMsg#getMsgContent()</code> is new MyBuds status, type is <code>AirohaMyBudsInfo</code>
///   </li>
/// </ul>
///
- (void)setFindMyBudsWithMyBudsInfo:(AirohaMyBudsInfo * _Nonnull)myBudsInfo listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get gesture action with specified gestureId.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaGestureMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaGestureMsg.getMsgID()</code> is <code>AirohaMessageID.GESTURE_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaGestureMsg.getMsgContent()</code> is current Gesture status, type is <code>AirohaGestureInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param gestureId 
/// 0x01 - Single click on left;
/// 0x02 - Single click on right;
/// 0x03 - Double click on left;
/// 0x04 - Double click on right;
/// 0x05 - Long press on left;
/// 0x06 - Long press on right;
/// 0x07 - Triple click on left;
/// 0x08 - Triple click on right;
/// 0x09 - DLong press on left;
/// 0x0A - DLong press on right;
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getGestureStatusWithGestureId:(NSInteger)gestureId listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set gesture configuration.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaGestureMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaGestureMsg.getMsgID()</code> is <code>AirohaMessageID.GESTURE_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaGestureMsg.getMsgContent()</code> is new Gesture status, type is [<code>AirohaGestureInfo</code>]
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param gestureInfoList see <code>AirohaGestureInfo</code>
/// gestureId:
/// 0x01 - Single click on left;
/// 0x02 - Single click on right;
/// 0x03 - Double click on left;
/// 0x04 - Double click on right;
/// 0x05 - Long press on left;
/// 0x06 - Long press on right;
/// 0x07 - Triple click on left;
/// 0x08 - Triple click on right;
/// 0x09 - DLong press on left;
/// 0x0A - DLong press on right;
/// actionId
/// 0x00 - Action None;
/// 0x01 - Volume Up;
/// 0x02 - Volume Down;
/// 0x03 - ANC;
/// 0x05 - Pass Through;
/// 0x06 - Next Track;
/// 0x07 - Previous Track;
/// 0x08 - Play Pause;
/// 0xA0 - Wake Up Siri;
/// 0xA1 - Wake Up Siri Notify;
/// 0xA2 - Gsound Cancel;
/// 0xA3 - Gsound Notify;
/// 0xA4 - Gsound Query;
/// 0xA5 - AMA Tap;
/// 0xA6 - AMA Hold;
/// 0xA7 - Xiaowei Tap;
/// 0xA8 - Xiaowei Hold;
/// 0xA9 - XiaoAi Tap;
/// 0xAA - XiaoAi Hold;
/// 0xD1 - Action Default;
/// 0xD2 - Share Mode Switch;
/// 0xD3 - Share Mode Follower Switch;
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setGestureStatusWithGestureInfoList:(NSArray<AirohaGestureInfo *> * _Nonnull)gestureInfoList listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Reset gesture configuration.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaGestureMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaGestureMsg.getMsgID()</code> is <code>AirohaMessageID.GESTURE_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaGestureMsg.getMsgContent()</code> is new Gesture status, type is [<code>AirohaGestureInfo</code>]
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param gesture 
/// AirohaGestureInfo#LEFT_ALL reset all gesture on left,
/// AirohaGestureInfo#RIGHT_ALL reset all gesture on right.
/// AirohaGestureInfo#ALL reset all gesture both on left and right.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)resetGestureStatusWithGesture:(NSInteger)gesture listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Check whether AI OTA in progress or not. Since AI OTA is highest priority, we need to check the status before start firmware OTA.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaOTAInfoMsg,</code> which
///     <ul>
///       <li>
///         <code>AirohaOTAInfoMsg.getMsgID()</code> is <code>AirohaMessageID.FOTA_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaOTAInfoMsg.getMsgContent()</code> is new OTA status, type is <code>AirohaOTAInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getRunningOTAInfoWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Check TWS connection status
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.TWS_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current TWS connection status, type is Bool, value can be:
///         <ul>
///           <li>
///             true - partner connected;
///           </li>
///           <li>
///             false - partner disconnected;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getTwsConnectStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get SideTone State.
/// note:
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SIDETONE_LEVEL,</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current sideTone level, type is <code>SideToneInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getSideToneStateWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set SideTone State.
/// note:
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///   </li>
///   <li>
///     <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SIDETONE_LEVEL</code>,
///   </li>
///   <li>
///     <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current sideTone level, type is <code>SideToneInfo</code>
///   </li>
/// </ul>
/// \param info <code>SideToneInfo</code>
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setSideToneStateWithInfo:(SideToneInfo * _Nonnull)info listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get current sealing status.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SEALING_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current sealing value, type is <code>AirohaSealingInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getSealingStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get current battery status.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.BATTERY_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current battery status, type is <code>AirohaBatteryInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getBatteryInfoWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get current fw version.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.FIRMWARE_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current fw version, type is [String]
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getFirmwareVerWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get current smart switch settings.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param message in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SMART_SWITCH_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current smart switch value, type is Int, value can be:
///         <ul>
///           <li>
///             1 - Default: High audio quality / Normal Latency;
///           </li>
///           <li>
///             2 - Movie/Gaming mode: Low audio quality / Low Latency;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getSmartSwitchStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set smart switch status
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param message in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SMART_SWITCH_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is new smart switch value, type is Int, value can be:
///         <ul>
///           <li>
///             1 - Default: High audio quality / Normal Latency;
///           </li>
///           <li>
///             2 - Movie/Gaming mode: Low audio quality / Low Latency;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param musicSettings 
/// 1 - Default: High audio quality / Normal Latency;
/// 2 - Movie/Gaming mode: Low audio quality / Low Latency;
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setSmartSwitchStatusWithMusicSettings:(NSInteger)musicSettings listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get touch status
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.TOUCH_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current touch information, type is Int, Value can be:
///         <ul>
///           <li>
///             0 - Touch off;
///           </li>
///           <li>
///             1 - Touch on;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getTouchStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set touch status
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.TOUCH_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is touch status, type is Int, value can be:
///         <ul>
///           <li>
///             0 - Touch off;
///           </li>
///           <li>
///             1 - Touch on;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param touchOnOff 
/// 0 - Touch off;
/// 1 - Touch on;
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setTouchStatusWithTouchOnOff:(NSInteger)touchOnOff listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get Share Mode state.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SHARE_MODE_STATE</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current share mode information, type is <code>AirohaShareModeInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getShareModeStateWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set Share Mode state
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SHARE_MODE_STATE,</code>
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is share mode information, type is <code>AirohaShareModeInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param shareModeOnOff 
/// 0 - Share Mode off;
/// 1 - Share Mode agent on;
/// 2 - Share Mode follower on;
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setShareModeStateWithShareModeOnOff:(NSInteger)shareModeOnOff listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get current advanced passthrough status.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.ADVANCED_PASSTHRU_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current advanced passthrough status, type is <code>Bool</code>, Value can be:
///         <ul>
///           <li>
///             false - disable
///           </li>
///           <li>
///             true - enable
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getAdvancedPassThruStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set advanced passthrough status.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.ADVANCED_PASSTHRU_STATUS,</code>
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is advanced passthrough status, type is <code>Bool</code>
///         <ul>
///           <li>
///             false - disable
///           </li>
///           <li>
///             true - enable
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param enable 
/// false - diable
/// true - enable
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setAdvancedPassThruStatusWithEnable:(BOOL)enable listener:(id <AirohaDeviceListener> _Nullable)listener;
@end


/// <ul>
///   <li>
///     Message to describe device info list.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156219AirohaDeviceInfoMsg")
@interface AirohaDeviceInfoMsg : AirohaBaseMsg
- (nonnull instancetype)initWithDeviceList:(NSArray<AirohaDevice *> * _Nonnull)deviceList OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end

enum StatusCode : NSInteger;

SWIFT_PROTOCOL("_TtP10Airoha156220AirohaDeviceListener_")
@protocol AirohaDeviceListener
/// General callback of AirohaDeviceControl and AirohaEQControl get APIs.
/// \param code code StatusCode.STATUS_SUCCESS of means success, others for fail with reasons.
///
/// \param msg return value, data format refer to the related API in AirohaDeviceStatusControl and AirohaEQControl
///
- (void)onReadWithCode:(enum StatusCode)code msg:(AirohaBaseMsg * _Nonnull)msg;
/// General callback of AirohaDeviceControl and AirohaEQControl set/change/update APIs
/// \param code code StatusCode.STATUS_SUCCESS of means success, others for fail with reasons.
///
/// \param msg return value, data format refer to the related API in AirohaDeviceStatusControl and AirohaEQControl
///
- (void)onChangedWithCode:(enum StatusCode)code msg:(AirohaBaseMsg * _Nonnull)msg;
@optional
/// General callback of AirohaDeviceControl and AirohaEQControl set/change/update APIs
/// \param code code StatusCode.STATUS_SUCCESS of means success, others for fail with reasons.
///
/// \param msg return value, data format refer to the related API in AirohaDeviceStatusControl and AirohaEQControl
///
- (void)onDebugWithCode:(enum StatusCode)code msg:(AirohaBaseMsg * _Nonnull)msg;
@end

/// <ul>
///   <li>
///     Enum of  protocol might be used, mainly use BLE for now.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AirohaDeviceProtocol, open) {
  AirohaDeviceProtocolUNKNOWN = 0x0,
  AirohaDeviceProtocolBLE = 0x00000001,
  AirohaDeviceProtocolGATT_BR_EDR = 0x00100000,
  AirohaDeviceProtocolIAP2 = 0x01000000,
};

/// <ul>
///   <li>
///     Enum of device roles
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AirohaDeviceRole, open) {
  AirohaDeviceRoleUNKNOWN = 0,
  AirohaDeviceRoleAGENT = 1,
  AirohaDeviceRolePARTNER = 2,
};

@class AirohaEQPayload;

SWIFT_PROTOCOL("_TtP10Airoha156215AirohaEQControl_")
@protocol AirohaEQControl <AirohaBaseControl>
/// Get all EQ settings.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaEQStatusMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaEQStatusMsg.getMsgID()</code> is <code>AirohaMessageID.PEQ_INFO</code>,
///       </li>
///       <li>
///         <code>AirohaEQStatusMsg#getMsgContent()</code> is current running EQ settings, type is an array of <code>AirohaEQSettings</code>
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>AirohaEQSettings.getEqPayload()</code> is nil for preset EQ settings, <code>AirohaEQPayload</code> object for customized EQ.
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getAllEQSettingsWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get EQ index that currently turned on.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaEQStatusMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaEQStatusMsg.getMsgID()</code> is <code>AirohaMessageID.RUNNING_EQ_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaEQStatusMsg#getMsgContent()</code> is current running EQ setting, type is an array of <code>AirohaEQSettings</code>
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>AirohaEQSettings.getEqPayload()</code> is nil for preset EQ settings, <code>AirohaEQPayload</code> object for customized EQ.
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getRunningEQSettingWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set enable/disable EQ.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaEQStatusMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaEQStatusMsg.getMsgID()</code> is <code>AirohaMessageID.PEQ_INFO</code>,
///       </li>
///       <li>
///         <code>AirohaEQStatusMsg#getMsgContent()</code> is new changed EQ settings, type is an array <code>AirohaEQSettings</code>
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>AirohaEQSettings.getEqPayload()</code> is nil for preset EQ settings, <code>AirohaEQPayload</code> object for customized EQ.
///   </li>
/// </ul>
/// \param categoryId preset ID scope in [1 ~ 100], customized EQ ID start with 101.
/// 0 - Disable EQ
/// 1 - Preset EQ 1
/// 2 - Preset EQ 2
/// 3 - Preset EQ 3,
/// …
/// 101 - Customized EQ 1
/// 102 - Customized EQ 2
/// 103 - Customized EQ 3
///
/// \param payload might be nil for preset EQ.
///
/// \param saveOrNot true save current payload, otherwise only set current payload.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setEQSettingWithCategoryId:(NSInteger)categoryId payload:(AirohaEQPayload * _Nullable)payload saveOrNot:(BOOL)saveOrNot listener:(id <AirohaDeviceListener> _Nullable)listener;
/// The specific preset EQ willl be replaced by customer eq.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaEQStatusMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaBaseMsg.getMsgID()</code> is <code>AirohaMessageID.REPLACE_EQ_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaBaseMsg.getMsgContent()</code> is Bool type. true means success.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// warning:
/// You should not call this API. It is for special usage.
/// \param categoryIdFrom the category id of customer EQ
///
/// \param categoryIdTo the category id of preset EQ
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)replaceEQSettingWithCategoryIdFrom:(NSInteger)categoryIdFrom categoryIdTo:(NSInteger)categoryIdTo listener:(id <AirohaDeviceListener> _Nullable)listener;
/// The specific preset EQ willl be reset to its original setting.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaEQStatusMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaBaseMsg.getMsgID()</code> is <code>AirohaMessageID.RESET_EQ_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaBaseMsg.getMsgContent()</code> is Bool type. true means success.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// warning:
/// You should not call this API. It is for special usage.
/// \param presetCategoryId the category id of preset EQ
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)resetEQSettingWithPresetCategoryId:(NSInteger)presetCategoryId listener:(id <AirohaDeviceListener> _Nullable)listener;
@end

enum SAMPLE_RATE : uint8_t;
@class EQIDParam;

/// <ul>
///   <li>
///     EQ payload definition. The details of the customized EQ
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156215AirohaEQPayload")
@interface AirohaEQPayload : NSObject
/// For the usage on special UI spec
- (NSInteger)getIndex SWIFT_WARN_UNUSED_RESULT;
/// For the usage on special UI spec
- (void)setIndexWithIndex:(NSInteger)index;
/// No use currently.
- (float)getCalibration SWIFT_WARN_UNUSED_RESULT;
/// No use currently.
- (void)setCalibrationWithCalibration:(float)calibration;
/// Get sample rate
- (enum SAMPLE_RATE)getSampleRate SWIFT_WARN_UNUSED_RESULT;
/// Set sample rate
- (void)setSampleRateWithSampleRate:(enum SAMPLE_RATE)sampleRate;
/// Get all sample rates
/// warning:
/// This method is for objcective c. If you are using swift, please invoke getAllSampleRates instead
///
/// returns:
/// The NSArray with type SAMPLE_RATE
- (NSArray * _Nullable)getAllSampleRates_Objc SWIFT_WARN_UNUSED_RESULT;
/// Set all sample rates
/// warning:
/// This method is for objcective c. If you are using swift, please invoke setAllSampleRates instead
/// <ul>
///   <li>
///     parameters sampleRateArray: The NSArray with type SAMPLE_RATE
///   </li>
/// </ul>
- (void)setAllSampleRates_ObjcWithSampleRateArray:(NSArray * _Nonnull)sampleRateArray;
/// Get master gain
- (float)getLeftGain SWIFT_WARN_UNUSED_RESULT;
/// Set master gain
- (void)setLeftGainWithLeftGain:(float)leftGain;
/// No use currently, you should use getLeftGain for getting master gain.
- (float)getRightGain SWIFT_WARN_UNUSED_RESULT;
/// No use currently, you should use setLeftGain for setting master gain.
- (void)setRightGainWithRightGain:(float)rightGain;
/// Get band count
- (float)getBandCount SWIFT_WARN_UNUSED_RESULT;
/// Set band count
- (void)setBandCountWithBandCount:(float)bandCount;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Get list of band infos
/// returns might be nil.
- (NSArray<EQIDParam *> * _Nullable)getIirParams SWIFT_WARN_UNUSED_RESULT;
/// Set list of band infos
- (void)setIirParamsWithIirParams:(NSArray<EQIDParam *> * _Nonnull)iirParams;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     EQ band infomation
///   </li>
/// </ul>
SWIFT_CLASS("_TtCC10Airoha156215AirohaEQPayload9EQIDParam")
@interface EQIDParam : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// <ul>
///   <li>
///     bandType: no use currently. Just specify to be 0
///   </li>
///   <li>
///     gainValue: the gain of the band
///   </li>
///   <li>
///     frequency: the frequency of the band
///   </li>
///   <li>
///     qValue: the q value of the band
///   </li>
/// </ul>
- (nonnull instancetype)initWithBandType:(NSInteger)bandType gainValue:(float)gainValue frequency:(float)frequency qValue:(float)qValue OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)getBandType SWIFT_WARN_UNUSED_RESULT;
- (void)setBandTypeWithBandType:(NSInteger)bandType;
- (float)getGainValue SWIFT_WARN_UNUSED_RESULT;
- (void)setGainValueWithGainValue:(float)gainValue;
- (float)getFrequency SWIFT_WARN_UNUSED_RESULT;
- (void)setFrequencyWithFrequency:(float)frequency;
- (float)getQValue SWIFT_WARN_UNUSED_RESULT;
- (void)setQValueWithQValue:(float)qValue;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// <ul>
///   <li>
///     eq status definition
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156216AirohaEQSettings")
@interface AirohaEQSettings : NSObject
/// <ul>
///   <li>
///     get categoryId number
///   </li>
///   <li>
///     1 - Preset EQ 1,
///   </li>
///   <li>
///     2 - Preset EQ 2,
///   </li>
///   <li>
///     3 - Preset EQ 3,
///   </li>
///   <li>
///     …
///   </li>
///   <li>
///     101 - Customized EQ 1,
///   </li>
///   <li>
///     102 - Customized EQ 2,
///   </li>
///   <li>
///     103 - Customized EQ 3,
///   </li>
///   <li>
///     104 - Customized EQ 4,
///   </li>
/// </ul>
- (NSInteger)getCategoryId SWIFT_WARN_UNUSED_RESULT;
- (void)setCategoryIdWithId:(NSInteger)id;
/// <ul>
///   <li>
///     status:
///   </li>
///   <li>
///     0 for OFF;
///   </li>
///   <li>
///     1 for ON;
///   </li>
/// </ul>
- (NSInteger)getStatus SWIFT_WARN_UNUSED_RESULT;
- (void)setStatusWithStatus:(NSInteger)status;
/// <ul>
///   <li>
///     get the details of this customized eq
///   </li>
/// </ul>
- (AirohaEQPayload * _Nullable)getEqPayload SWIFT_WARN_UNUSED_RESULT;
- (void)setEqPayloadWithEqPayload:(AirohaEQPayload * _Nullable)eqPayload;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Message to describe device info list.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156217AirohaEQStatusMsg")
@interface AirohaEQStatusMsg : AirohaBaseMsg
- (nonnull instancetype)initWithMsgId:(enum AirohaMessageID)msgId eqList:(NSArray<AirohaEQSettings *> * _Nonnull)eqList OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end

@class RemoteOTAConfig;
enum AirohaOTAStatus_Objc : NSInteger;
enum FotaTarget : NSInteger;
@class AirohaROFSVersion;
@class FotaSettings;
@protocol AirohaFOTAStatusListener_Objc;
@class NSNumber;

/// warning:
/// This protocol is for objcective c. If you are using swift, please use AirohaFOTAControl instead
SWIFT_PROTOCOL("_TtP10Airoha156222AirohaFOTAControl_Objc_")
@protocol AirohaFOTAControl_Objc
/// Get AirohaDevice this AirohaOTATask is running for.
///
/// returns:
/// the device which is currently running ota
- (AirohaDevice * _Nullable)getDevice SWIFT_WARN_UNUSED_RESULT;
/// Get RemoteOTAConfig this AirohaOTATask is using.
///
/// returns:
/// RemoteOTAConfig
- (RemoteOTAConfig * _Nonnull)getOtaConfig SWIFT_WARN_UNUSED_RESULT;
/// Get current AirohaOTATask status.
/// This method is for objcective c.
/// warning:
/// This method is for objcective c. If you are using swift, please invoke getOtaStatus instead
///
/// returns:
/// AirohaOTAStatus which means current ota status
- (enum AirohaOTAStatus_Objc)getOTAStatus_Objc SWIFT_WARN_UNUSED_RESULT;
/// Get current data transfer progress, number of permillage.
///
/// returns:
/// return the number of permillage
- (NSInteger)getCurrentProgress SWIFT_WARN_UNUSED_RESULT;
/// Request DFU (Device Firmware Upgrade) info on device.
/// \param type a parameter used to decide to request single or dual dfu info.
///
///
/// returns:
/// return device info on device
- (AirohaDFUInfo * _Nullable)requestDFUInfoWithType:(enum FotaTarget)type SWIFT_WARN_UNUSED_RESULT;
/// Request ROFS Version on device.
///
/// returns:
/// return ROFS Version on device
- (AirohaROFSVersion * _Nullable)requestROFSVersionWithType:(enum FotaTarget)type SWIFT_WARN_UNUSED_RESULT;
/// A plugin API to provide an opportunity to initialize the OTA data transfer.
/// For some platforms, app or client needs to explicitly tell the device such as flash address and so on.
- (void)preTransferInit;
/// Request to start data transfer with given FotaSettings.
/// This method is for objcective c.
/// warning:
/// This method is for objcective c. If you are using swift, please invoke startDataTransfer instead
/// \param fotaSettings a parameter used to config fota settings like ota bin path, battery threshold, and background mode fota.
///
/// \param listener notify ota status and the data transfer progress changed.
///
- (BOOL)startDataTransfer_ObjcWithFotaSettings:(FotaSettings * _Nonnull)fotaSettings listener:(id <AirohaFOTAStatusListener_Objc> _Nonnull)listener SWIFT_WARN_UNUSED_RESULT;
/// Request to stop data transfer.
/// User may need to stop OTA transfer for higher priority actions.
- (BOOL)stopDataTransfer SWIFT_WARN_UNUSED_RESULT;
/// A plugin API to provide an opportunity to clean up after OTA data transfer if needs.
- (void)postTransferCleanup;
/// Request device to apply new transfer after data transfer completed. (for objective c)
/// \param threshold battery level check when applyNewFirmware. If this paramter is nil, the value will be fotaSettings.getBatteryLevelThrd().
///
- (BOOL)applyNewFirmwareWithThreshold:(NSNumber * _Nullable)threshold SWIFT_WARN_UNUSED_RESULT;
/// Register data transfer listener.
/// warning:
/// This method is for objcective c. If you are using swift, please invoke registerOTAStatusListener instead
/// \param listener notify ota status and the data transfer progress changed.
///
- (void)registerOTAStatusListener_ObjcWithListener:(id <AirohaFOTAStatusListener_Objc> _Nonnull)listener;
/// Unregister data transfer listener.
/// warning:
/// This method is for objcective c. If you are using swift, please invoke unregisterOTAStatusListener instead
/// \param listener unregister listener.
///
- (void)unregisterOTAStatusListener_ObjcWithListener:(id <AirohaFOTAStatusListener_Objc> _Nonnull)listener;
- (BOOL)isProcessingRhoOrCommit SWIFT_WARN_UNUSED_RESULT;
@end

enum AirohaFotaError : NSInteger;

/// warning:
/// This listener is for objcective c. If you are using swift, please use AirohaFOTAStatusListener instead
SWIFT_PROTOCOL("_TtP10Airoha156229AirohaFOTAStatusListener_Objc_")
@protocol AirohaFOTAStatusListener_Objc
@optional
/// This is for objcective c used
/// warning:
/// This delegate is for objcective c. If you are using swift, please use onOTAStatusChanged(newStatus: AirohaOTAStatus) instead
/// \param newStatus ota status changed
///
/// \param error status fail error
///
- (void)onOTAStatusChangedWithNewStatus:(enum AirohaOTAStatus_Objc)newStatus error:(enum AirohaFotaError)error;
@required
/// \param progress progress changed. range is 0 ~ 1000, which means 0.0% ~ 100.0%
///
- (void)onTransferProgressChangedWithProgress:(NSInteger)progress;
/// \param current_stage current stage changed
///
- (void)onProgressStageChangedWithCurrent_stage:(NSString * _Nonnull)current_stage;
@end

typedef SWIFT_ENUM(NSInteger, AirohaFotaError, open) {
  AirohaFotaErrorSuccess = 0,
  AirohaFotaErrorTimeout = 1,
  AirohaFotaErrorGetResponseFail = 2,
  AirohaFotaErrorGenerateCmdFail = 3,
  AirohaFotaErrorLockCmdProxyFail = 4,
  AirohaFotaErrorErrorStatus = 5,
  AirohaFotaErrorBinFileInvalid = 6,
  AirohaFotaErrorClientBinFileInvalid = 7,
  AirohaFotaErrorNvrFileInvalid = 8,
  AirohaFotaErrorFotaPackageSizeInvalid = 9,
  AirohaFotaErrorBatteryTooLow = 10,
  AirohaFotaErrorClientIsNotExist = 11,
  AirohaFotaErrorResumeTableMissing = 12,
  AirohaFotaErrorCmdResponseUnexpected = 13,
  AirohaFotaErrorGetFotaInfoFail = 14,
  AirohaFotaErrorGetRofsVersionFail = 15,
  AirohaFotaErrorPeripheralConnectFail = 16,
  AirohaFotaErrorPeripheralDisconnected = 17,
  AirohaFotaErrorPeripheralConnectionTimeout = 18,
  AirohaFotaErrorWrongActions = 19,
  AirohaFotaErrorRoleSwitchFail = 20,
  AirohaFotaErrorCommitFail = 21,
  AirohaFotaErrorResetFail = 22,
  AirohaFotaErrorVerifyStateFail = 23,
/// app trigger cancel, but cancel command didnot success
  AirohaFotaErrorCancelFotaFail = 24,
/// app trigger cancel and cancel command get success response
  AirohaFotaErrorFotaCanceled = 25,
/// device trigger cancel but no reason
  AirohaFotaErrorFotaCanceled_BytDevice_NoReason = 26,
/// device trigger cancel because end user want to cancel
  AirohaFotaErrorFotaCanceled_ByDevice_UserTriggerCancel = 27,
/// device trigger cancel because something wrong
  AirohaFotaErrorFotaCanceled_ByDevice_Fail = 28,
/// device trigger cancel because timeout
  AirohaFotaErrorFotaCanceled_ByDevice_Timeout = 29,
/// device trigger cancel because partner loss
  AirohaFotaErrorFotaCanceled_ByDevice_PartnerLoss = 30,
/// device trigger cancel, but reason not defined
  AirohaFotaErrorFotaCanceled_ByDevice_ReasonNotDefined = 31,
  AirohaFotaErrorBluetoothIsNotPowerOn = 32,
  AirohaFotaErrorDisableAutoBootAfterResetFail = 33,
  AirohaFotaErrorFileSystemSha256NotMatch = 34,
  AirohaFotaErrorPingFotaCmdFailed = 35,
  AirohaFotaErrorQueryFotaInfoFailedAfterRHO = 36,
  AirohaFotaErrorRhoRepeatlyProcessManyTimes = 37,
  AirohaFotaErrorFotaNotCompleted = 38,
  AirohaFotaErrorFail = 39,
  AirohaFotaErrorReceiveSetMmiEnumRespDuringFota = 40,
  AirohaFotaErrorNone = 41,
};


SWIFT_CLASS("_TtC10Airoha156217AirohaGestureInfo")
@interface AirohaGestureInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SINGLE_TAP_LEFT;)
+ (NSInteger)SINGLE_TAP_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SINGLE_TAP_RIGHT;)
+ (NSInteger)SINGLE_TAP_RIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DOUBLE_TAP_LEFT;)
+ (NSInteger)DOUBLE_TAP_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DOUBLE_TAP_RIGHT;)
+ (NSInteger)DOUBLE_TAP_RIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LONG_PRESS_LEFT;)
+ (NSInteger)LONG_PRESS_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LONG_PRESS_RIGHT;)
+ (NSInteger)LONG_PRESS_RIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger TRIPLE_TAP_LEFT;)
+ (NSInteger)TRIPLE_TAP_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger TRIPLE_TAP_RIGHT;)
+ (NSInteger)TRIPLE_TAP_RIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DLONG_LEFT;)
+ (NSInteger)DLONG_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DLONG_RIGHT;)
+ (NSInteger)DLONG_RIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LEFT_ALL;)
+ (NSInteger)LEFT_ALL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger RIGHT_ALL;)
+ (NSInteger)RIGHT_ALL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ALL;)
+ (NSInteger)ALL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ACTION_NONE;)
+ (NSInteger)ACTION_NONE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger VOLUME_UP;)
+ (NSInteger)VOLUME_UP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger VOLUME_DOWN;)
+ (NSInteger)VOLUME_DOWN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ANC;)
+ (NSInteger)ANC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PASS_THROUGH;)
+ (NSInteger)PASS_THROUGH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NEXT_TRACK;)
+ (NSInteger)NEXT_TRACK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PREVIOUS_TRACK;)
+ (NSInteger)PREVIOUS_TRACK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PLAY_PAUSE;)
+ (NSInteger)PLAY_PAUSE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SWITCH_ANC_AND_PASSTHRU;)
+ (NSInteger)SWITCH_ANC_AND_PASSTHRU SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_SIRI;)
+ (NSInteger)WAKE_UP_SIRI SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_SIRI_NOTIFY;)
+ (NSInteger)WAKE_UP_SIRI_NOTIFY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger GSOUND_CANCEL;)
+ (NSInteger)GSOUND_CANCEL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger GSOUND_NOTIFY;)
+ (NSInteger)GSOUND_NOTIFY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger GSOUND_QUERY;)
+ (NSInteger)GSOUND_QUERY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_ALEXA_TAP;)
+ (NSInteger)WAKE_UP_ALEXA_TAP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_ALEXA_HOLD;)
+ (NSInteger)WAKE_UP_ALEXA_HOLD SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_XIAOWEI_TAP;)
+ (NSInteger)WAKE_UP_XIAOWEI_TAP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_XIAOWEI_HOLD;)
+ (NSInteger)WAKE_UP_XIAOWEI_HOLD SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_XIAOAI_TAP;)
+ (NSInteger)WAKE_UP_XIAOAI_TAP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_XIAOAI_HOLD;)
+ (NSInteger)WAKE_UP_XIAOAI_HOLD SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SWITCH_EQ;)
+ (NSInteger)SWITCH_EQ SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ACTION_DEFAULT;)
+ (NSInteger)ACTION_DEFAULT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SHARE_MODE_SWITCH;)
+ (NSInteger)SHARE_MODE_SWITCH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SHARE_MODE_FOLLOWER_SWITCH;)
+ (NSInteger)SHARE_MODE_FOLLOWER_SWITCH SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     gestureId
///   </li>
///   <li>
///     0x01 - Single click on left;
///   </li>
///   <li>
///     0x02 - Single click on right;
///   </li>
///   <li>
///     0x03 - Double click on left;
///   </li>
///   <li>
///     0x04 - Double click on right;
///   </li>
///   <li>
///     0x05 - Long press on left;
///   </li>
///   <li>
///     0x06 - Long press on right;
///   </li>
///   <li>
///     0x07 - Triple click on left;
///   </li>
///   <li>
///     0x08 - Triple click on right;
///   </li>
///   <li>
///   </li>
///   <li>
///     …
///   </li>
///   <li>
///   </li>
/// </ul>
- (NSInteger)getGestureId SWIFT_WARN_UNUSED_RESULT;
- (void)setGestureIdWithGestureId:(NSInteger)gestureId;
/// <ul>
///   <li>
///     actionId
///   </li>
///   <li>
///     0x01 - Volume Up;
///   </li>
///   <li>
///     0x02 - Volume Down;
///   </li>
///   <li>
///     0x03 - ANC;
///   </li>
///   <li>
///     0x05 - Pass Through;
///   </li>
///   <li>
///     0x06 - Next Track
///   </li>
///   <li>
///     0x07 - Previous Track
///   </li>
///   <li>
///     0x08 - Play/Pause
///   </li>
///   <li>
///     0xa0 - Wake Up Siri
///   </li>
///   <li>
///   </li>
///   <li>
///   </li>
/// </ul>
- (NSInteger)getActionId SWIFT_WARN_UNUSED_RESULT;
- (void)setActionIdWithActionId:(NSInteger)actionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10Airoha156216AirohaGestureMsg")
@interface AirohaGestureMsg : AirohaBaseMsg
- (nonnull instancetype)initWithGestureInfoList:(NSArray<AirohaGestureInfo *> * _Nonnull)gestureInfoList OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end


/// A static, singleton class to intial library and get library log. Please do not create instances by yourself, instead, use the AirohaLogger.Inst to get the share instance.
/// There are some Modules in AirohaLibrary framework:
/// <ol>
///   <li>
///     AirohaSdkMgr.Inst.getAirohaConnector() / AirohaConnectionListener - Please Use this class to set the periperal to our library
///   </li>
///   <li>
///     AirohaSdkMgr.Inst.getDeviceControl(), getEQControl / AirohaDeviceListener - Send command and response.
///   </li>
///   <li>
///     AirohaSdkMgr.Inst.getFotaControl() / AirohaFOTAStatusListener - FOTA process.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC10Airoha156212AirohaLogger")
@interface AirohaLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// initial AirohaLogger log setting
/// \param showDebuggingLog Bool, true: trun on framework debugging log. flase: turn off framework debugging log.
///
- (void)initialWithShowDebuggingLog:(BOOL)showDebuggingLog onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
/// getFrameworkLogsPath - return framework log path array, client can export these log by email
/// .log is current using framework log
/// .bak.log is last time using framework log
- (NSArray<NSURL *> * _Nonnull)getFrameworkLogsPath SWIFT_WARN_UNUSED_RESULT;
- (void)setLogWithLog:(NSString * _Nonnull)log;
- (void)copyLog;
- (void)cleanLog;
@end

/// <ul>
///   <li>
///     enum of messages
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AirohaMessageID, open) {
  AirohaMessageIDUNKNOWN = -1,
/// <ul>
///   <li>
///     Device control request messages.
///   </li>
/// </ul>
  AirohaMessageIDDEVICE_LIST_INFO = 1001,
  AirohaMessageIDDEVICE_NAME = 1002,
  AirohaMessageIDANC_STATUS = 1003,
  AirohaMessageIDAUTO_PAUSE = 1004,
  AirohaMessageIDAUTO_POWER_OFF = 1005,
  AirohaMessageIDMULTI_AI_STATUS = 1006,
  AirohaMessageIDA2DP_STATUS = 1007,
  AirohaMessageIDFIND_ME_STATUS = 1008,
  AirohaMessageIDTWS_STATUS = 1009,
  AirohaMessageIDSEALING_STATUS = 1010,
  AirohaMessageIDGESTURE_STATUS = 1011,
  AirohaMessageIDSYNC_CRC_STATUS = 1012,
  AirohaMessageIDDEVICE_INFO = 1013,
  AirohaMessageIDBATTERY_STATUS = 1014,
  AirohaMessageIDIN_EAR_STATUS = 1015,
  AirohaMessageIDSMART_SWITCH_STATUS = 1016,
  AirohaMessageIDAUDIO_CHANNEL_STATUS = 1017,
  AirohaMessageIDSIDETONE_LEVEL = 1019,
  AirohaMessageIDSERIAL_NUMBER_STATUS = 1020,
  AirohaMessageIDFACTORY_RESET_STATUS = 1021,
  AirohaMessageIDCASE_VERSION = 1025,
  AirohaMessageIDMULTI_LANG_VOICE_PROMPT = 1040,
  AirohaMessageIDHOT_WORD_MODE = 1041,
  AirohaMessageIDCALL_STATUS = 1066,
  AirohaMessageIDSIDETONE_INFO = 1112,
  AirohaMessageIDSET_MULTI_LANG_STATUS = 1113,
  AirohaMessageIDADVANCED_ANC_STATUS = 1114,
  AirohaMessageIDSHUT_DOWN_DEVICE = 1115,
  AirohaMessageIDREQ_STANDBY_MODE = 1116,
  AirohaMessageIDSET_STANDBY_MODE = 1117,
  AirohaMessageIDTOUCH_STATUS = 1500,
  AirohaMessageIDSDK_INFO = 1501,
  AirohaMessageIDSHARE_MODE_STAUS = 1502,
  AirohaMessageIDADVANCED_PASSTHRU_STATUS = 1504,
  AirohaMessageIDFIRMWARE_STATUS = 1800,
  AirohaMessageIDROFS_STATUS = 1801,
/// <ul>
///   <li>
///     OTA control request messages. Start from 2001.
///   </li>
/// </ul>
  AirohaMessageIDFOTA_STATUS = 2001,
/// <ul>
///   <li>
///     EQ control request messages. Start from 3001.
///   </li>
/// </ul>
  AirohaMessageIDPEQ_INFO = 3001,
  AirohaMessageIDRUNNING_EQ_STATUS = 3002,
  AirohaMessageIDCOMBINED_EQ_STATUS = 3003,
  AirohaMessageIDREPLACE_EQ_STATUS = 3101,
  AirohaMessageIDRESET_EQ_STATUS = 3102,
};


SWIFT_CLASS("_TtC10Airoha156216AirohaMyBudsInfo")
@interface AirohaMyBudsInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger INVALID_STATUS;)
+ (NSInteger)INVALID_STATUS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger OFF;)
+ (NSInteger)OFF SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get left beeping status
///   </li>
///   <li>
///   </li>
///   <li>
///     <ul>
///       <li>
///         returns 0 means off, other positive digit is beep numbers, negative digit means invalid beeping
///       </li>
///     </ul>
///   </li>
/// </ul>
- (NSInteger)getLeftBeeping SWIFT_WARN_UNUSED_RESULT;
/// Set left beeping status
/// \param leftBeeping 0 means off, other positive digit is beep numbers, negative digit means invalid beeping
///
- (void)setLeftBeepingWithLeftBeeping:(NSInteger)leftBeeping;
/// <ul>
///   <li>
///     Get right beeping status
///   </li>
///   <li>
///   </li>
///   <li>
///     <ul>
///       <li>
///         returns 0 means off, other positive digit is beep numbers, negative digit means invalid beeping
///       </li>
///     </ul>
///   </li>
/// </ul>
- (NSInteger)getRightBeeping SWIFT_WARN_UNUSED_RESULT;
/// Set right beeping status
/// \param rightBeeping 0 means off, other positive digit is beep numbers, negative digit means invalid beeping
///
- (void)setRightBeepingWithRightBeeping:(NSInteger)rightBeeping;
/// Get left lighting status
/// <ul>
///   <li>
///     returns 0 means off, other positive digit is lighting numbers, negative digit means invalid lighting
///   </li>
/// </ul>
- (NSInteger)getLeftLighting SWIFT_WARN_UNUSED_RESULT;
/// Set master lighting status
/// \param leftLighting 0 means off, other positive digit is lighting numbers, negative digit means invalid lighting
///
- (void)setLeftLightingWithLeftLighting:(NSInteger)leftLighting;
/// <ul>
///   <li>
///     Get right lighting status
///   </li>
///   <li>
///   </li>
///   <li>
///     <ul>
///       <li>
///         returns  0 means off, other positive digit is lighting numbers, negative digit means invalid lighting
///       </li>
///     </ul>
///   </li>
/// </ul>
- (NSInteger)getRightLighting SWIFT_WARN_UNUSED_RESULT;
/// Set right lighting status
/// \param rightLighting 0 means off, other positive digit is lighting numbers, negative digit means invalid lighting
///
- (void)setRightLightingWithRightLighting:(NSInteger)rightLighting;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10Airoha156215AirohaMyBudsMsg")
@interface AirohaMyBudsMsg : AirohaBaseMsg
- (nonnull instancetype)initWithBudsInfo:(AirohaMyBudsInfo * _Nonnull)budsInfo OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (AirohaMyBudsInfo * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AirohaOTAChannel, open) {
  AirohaOTAChannelCHANNEL_UNKNOWN = -1,
  AirohaOTAChannelCHANNEL_APP = 0,
  AirohaOTAChannelCHANNEL_GOOGLE_AI = 1,
  AirohaOTAChannelCHANNEL_AMAZON_AI = 2,
  AirohaOTAChannelCHANNEL_XIAOWEI_AI = 3,
};


/// <ul>
///   <li>
///     Anc status definition
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156213AirohaOTAInfo")
@interface AirohaOTAInfo : NSObject
- (enum AirohaOTAChannel)getOtaChannel SWIFT_WARN_UNUSED_RESULT;
- (void)setOtaChannelWithOtaChannel:(enum AirohaOTAChannel)otaChannel;
/// warning:
/// This method is for objcective c. If you are using swift, please invoke getOtaStatus instead
- (enum AirohaOTAStatus_Objc)getOtaStatus_Objc SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Message to describe OTA info.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156216AirohaOTAInfoMsg")
@interface AirohaOTAInfoMsg : AirohaBaseMsg
- (nonnull instancetype)initWithOtaInfo:(AirohaOTAInfo * _Nonnull)otaInfo OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (AirohaOTAInfo * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end

/// warning:
/// This enum is for objcective c.
typedef SWIFT_ENUM(NSInteger, AirohaOTAStatus_Objc, open) {
  AirohaOTAStatus_ObjcSTATUS_UNKNOWN = -1,
  AirohaOTAStatus_ObjcSTATUS_STARTED = 0,
  AirohaOTAStatus_ObjcSTATUS_CANCELED = 1,
  AirohaOTAStatus_ObjcSTATUS_FAILED = 2,
  AirohaOTAStatus_ObjcSTATUS_SUCCEED = 3,
  AirohaOTAStatus_ObjcSTATUS_REBOOT = 4,
  AirohaOTAStatus_ObjcSTATUS_READY_TO_UPDATE_FILESYSTEM = 5,
  AirohaOTAStatus_ObjcSTATUS_AUTO_REBOOT = 6,
};


SWIFT_CLASS("_TtC10Airoha156217AirohaROFSVersion")
@interface AirohaROFSVersion : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull agentRofsVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull partnerRofsVersion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getFsVersion SWIFT_WARN_UNUSED_RESULT;
- (void)copyFrom:(AirohaROFSVersion * _Nonnull)from;
- (void)reset;
@end

enum ChipType : NSInteger;
enum DeviceType : NSInteger;

/// Airoha Sdk Mgr: A singleton that used to control airoha sdk
SWIFT_CLASS("_TtC10Airoha156212AirohaSdkMgr")
@interface AirohaSdkMgr : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AirohaSdkMgr * _Nonnull Inst;)
+ (AirohaSdkMgr * _Nonnull)Inst SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// get current device’s chip type.
- (enum ChipType)getChipType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFotaRunning SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRoleSwitching SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPartnerExisting SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAgentRightSideDevice SWIFT_WARN_UNUSED_RESULT;
/// get current device’s project type.
- (enum DeviceType)getDeviceType SWIFT_WARN_UNUSED_RESULT;
/// get the instance to connect airoha device.
///
/// returns:
/// the instance of AirohaConnector
- (AirohaConnector * _Nonnull)getAirohaConnector SWIFT_WARN_UNUSED_RESULT;
/// get the instance to control device eq.
///
/// returns:
/// the instance of AirohaEQControl
- (id <AirohaEQControl> _Nonnull)getAirohaEQControl SWIFT_WARN_UNUSED_RESULT;
/// get the instance to control mmi, key releated function.
///
/// returns:
/// the instance of AirohaDeviceControl
- (id <AirohaDeviceControl> _Nonnull)getAirohaDeviceControl SWIFT_WARN_UNUSED_RESULT;
/// get the instance to control fota.
/// warning:
/// This method is for objcective c. If you are using swift, please invoke getAirohaFotaControl instead
///
/// returns:
/// the instance of AirohaFOTAControl_Objc
- (id <AirohaFOTAControl_Objc> _Nonnull)getAirohaFotaControl_Objc SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10Airoha156217AirohaSealingInfo")
@interface AirohaSealingInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger INVALID;)
+ (NSInteger)INVALID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NOT_READY;)
+ (NSInteger)NOT_READY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger READY;)
+ (NSInteger)READY SWIFT_WARN_UNUSED_RESULT;
/// Get left sealing status
///
/// returns:
/// <code>AirohaSealingInfo.NOT_READY</code> for not ready, <code>AirohaSealingInfo.READY</code> ready
- (NSInteger)getLeftSealing SWIFT_WARN_UNUSED_RESULT;
- (void)setLeftSealingWithLeftSealing:(NSInteger)leftSealing;
/// Get right sealing status
///
/// returns:
/// <code>AirohaSealingInfo.NOT_READY</code> for not ready, <code>AirohaSealingInfo.READY</code> ready
- (NSInteger)getRightSealing SWIFT_WARN_UNUSED_RESULT;
- (void)setRightSealingWithRightSealing:(NSInteger)rightSealing;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBUUID;

/// Airoha service uuid define, this is a singleton class, please donot create instance by your side.
/// There are Airoha default UUID
/// SERVICE UUID: “5052494D-2DAB-0341-6972-6F6861424C45”
/// Characteristic NOTIFY UUID: “43484152-2DAB-3141-6972-6F6861424C45”
/// Characteristic WRITE UUID : “43484152-2DAB-3241-6972-6F6861424C45”
/// If your project have different UUID, please invoke AirohaServices.Inst.setServiceCharacteristicUUIDs() to change uuid before invoke openBLE()
SWIFT_CLASS("_TtC10Airoha156214AirohaServices")
@interface AirohaServices : NSObject
/// Please using this share instance to set/get service uuid
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AirohaServices * _Nonnull Inst;)
+ (AirohaServices * _Nonnull)Inst SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Get Scan Service UUID
- (NSArray<CBUUID *> * _Nullable)getScanServiceUUIDs SWIFT_WARN_UNUSED_RESULT;
/// Get Command Service UUID String
- (NSString * _Nonnull)getCommandServiceUUIDString SWIFT_WARN_UNUSED_RESULT;
/// Get Tx Characteristic UUID String
- (NSString * _Nonnull)getTxCharacteristicUUIDString SWIFT_WARN_UNUSED_RESULT;
/// Get Rx Characteristic UUID String
- (NSString * _Nonnull)getRxCharacteristicUUIDString SWIFT_WARN_UNUSED_RESULT;
/// Default Command Service UUID = “5052494D-2DAB-0341-6972-6F6861424C45”
/// Default Write Characteristic UUID = “43484152-2DAB-3241-6972-6F6861424C45”
/// Default Notify/Indication Characteristic UUID = “43484152-2DAB-3141-6972-6F6861424C45”
/// If you want to modify the UUID, please invoke this API first before you call anyother functions.
- (void)setServiceCharacteristicUUIDsWithServiceUUID:(CBUUID * _Nonnull)serviceUUID writeCharacteristicUUID:(CBUUID * _Nonnull)writeCharacteristicUUID notifyIndicationCharacteristicUUID:(CBUUID * _Nonnull)notifyIndicationCharacteristicUUID;
/// Default Scan Service UUIDs = [CBUUID(“5052494D-2DAB-0341-6972-6F6861424C45”)]
/// If you want to modify the UUID, please invoke this API first before you call anyother functions.
- (void)setScanServiceUUIDsWithUuids:(NSArray<CBUUID *> * _Nullable)uuids;
/// please add client defined serivce and characteristic before call ConnectivityModule.Inst.openBLE()
/// \param serviceUUID string of serivce uuid
///
/// \param charUUID string of characteristic uuid
///
- (void)addSupportServiceAndCharacteristicWithServiceUUID:(NSString * _Nonnull)serviceUUID charUUID:(NSString * _Nonnull)charUUID;
@end

enum ShareModeState : NSInteger;

/// ShareMode info
SWIFT_CLASS("_TtC10Airoha156219AirohaShareModeInfo")
@interface AirohaShareModeInfo : NSObject
- (nonnull instancetype)initWithState:(enum ShareModeState)state OBJC_DESIGNATED_INITIALIZER;
- (enum ShareModeState)getShareModeState SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ShareModeState, open) {
  ShareModeStateSTATE_SET_SUCCESS = -1,
  ShareModeStateSTATE_NORMAL = 0,
  ShareModeStateSTATE_PREPAIRING = 1,
  ShareModeStateSTATE_SHARING = 2,
  ShareModeStateSTATE_LEAVING = 3,
};


/// Delegate wrapper for forwarding CBCentralManagerDelegate.
SWIFT_CLASS("_TtC10Airoha156229CentralManagerDelegateWrapper")
@interface CentralManagerDelegateWrapper : NSObject <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central willRestoreState:(NSDictionary<NSString *, id> * _Nonnull)dict;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central connectionEventDidOccur:(CBConnectionEvent)event forPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didUpdateANCSAuthorizationForPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Device chip type
typedef SWIFT_ENUM(NSInteger, ChipType, open) {
  ChipTypeAB155x = 0,
  ChipTypeAB1562 = 1,
  ChipTypeAB1568 = 2,
  ChipTypeAB1562E = 11,
  ChipTypeAB1565_DUAL = 21,
  ChipTypeAB1568_DUAL = 22,
};

@protocol ConnectivityModuleDelegate;

/// A static, singleton class to handle BLE peripheral. Please do not create instances by yourself, instead, use the ConnectivityModule.Inst to get the share instance. And don’t forget to register the callback (registerListener) in your delegate class.
SWIFT_CLASS("_TtC10Airoha156218ConnectivityModule")
@interface ConnectivityModule : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ConnectivityModule * _Nonnull Inst;)
+ (ConnectivityModule * _Nonnull)Inst SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)registerListenerWithName:(NSString * _Nonnull)name delegate:(id <ConnectivityModuleDelegate> _Nonnull)delegate;
- (void)unregisterListenerWithName:(NSString * _Nonnull)name;
@end

@class CBCharacteristic;
@class EASession;

/// The ConnectivityModuleDelegate protocol defines the peripheral job delegate here.
SWIFT_PROTOCOL("_TtP10Airoha156226ConnectivityModuleDelegate_")
@protocol ConnectivityModuleDelegate
/// A delegate function, tells the delegate there is discovered characteristic, and ready to control Bluetooth devices by BLE now
- (void)bleFoundCharacteristicWithPeripheral:(CBPeripheral * _Nonnull)peripheral charList:(NSArray<CBCharacteristic *> * _Nonnull)charList discoverAllSupportedService:(BOOL)discoverAllSupportedService;
@optional
/// A delegate function, tells the delegate library is ready to control Bluetooth devices by L2CAP now
- (void)l2capOpenChannelWithPeripheral:(CBPeripheral * _Nonnull)peripheral result:(BOOL)result;
- (void)iap2OpenChannelWithSession:(EASession * _Nonnull)session result:(BOOL)result;
@end

/// The MCSync project has agent/partner roles for device
typedef SWIFT_ENUM(uint8_t, DEVICE_ROLE, open) {
  DEVICE_ROLEAgent = 0x00,
  DEVICE_ROLEPartner = 0x01,
};

/// Earbuds or Headset project
typedef SWIFT_ENUM(NSInteger, DeviceType, open) {
  DeviceTypeHeadset = 0,
  DeviceTypeEarbuds = 1,
  DeviceTypeUnKnown = 2,
};






enum FotaType : NSInteger;
enum FotaMode : NSInteger;

/// FotaSettings: A paramter in startDataTransfer which used to config fota settings.
/// User can specify the following settings.
/// <ol>
///   <li>
///     fota type: typical or special upgrade (upgrade filesystem when using 2M flash)
///   </li>
///   <li>
///     fota target: single fota or dual fota
///   </li>
///   <li>
///     ota bin path
///   </li>
///   <li>
///     battery level threshold (default using 50. If battery level less than 50%, lib will callback fail)
///   </li>
///   <li>
///     using background fota
///   </li>
/// </ol>
SWIFT_CLASS("_TtC10Airoha156212FotaSettings")
@interface FotaSettings : NSObject
- (nonnull instancetype)initWithFotaType:(enum FotaType)fotaType fotaTarget:(enum FotaTarget)fotaTarget binFilePath:(NSString * _Nonnull)binFilePath;
- (nonnull instancetype)initWithFotaType:(enum FotaType)fotaType fotaTarget:(enum FotaTarget)fotaTarget fotaMode:(enum FotaMode)fotaMode leftBinFilePath:(NSString * _Nonnull)leftBinFilePath rightBinFilePath:(NSString * _Nonnull)rightBinFilePath OBJC_DESIGNATED_INITIALIZER;
- (enum FotaType)getFotaType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getRightBinFilePath SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLeftBinFilePath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getBatteryLevelThrd SWIFT_WARN_UNUSED_RESULT;
/// default will be 50 if you did not specify this setting. So if battery level below 50%, lib will delegate ota fail.
- (void)setBatteryLevelThrd:(NSInteger)batteryLevelThrd;
- (BOOL)isBackgroundFota SWIFT_WARN_UNUSED_RESULT;
/// default will be active fota if you did not specify this setting.
- (void)setBackgroundFota:(BOOL)backgroundFota;
- (enum FotaMode)getFotaMode SWIFT_WARN_UNUSED_RESULT;
- (void)setFotaModeWithFotaMode:(enum FotaMode)fotaMode;
- (NSInteger)getPartialReadFlashLengthKB SWIFT_WARN_UNUSED_RESULT;
- (void)setPartialReadFlashLengthKBWithPartialReadFlashLengthKB:(NSInteger)partialReadFlashLengthKB;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FotaType, open) {
  FotaTypeTypical = 0,
  FotaTypeSpecialUpgrade = 1,
};

typedef SWIFT_ENUM(NSInteger, FotaTarget, open) {
  FotaTargetSingle = 0,
  FotaTargetDual = 1,
};

typedef SWIFT_ENUM(NSInteger, FotaMode, open) {
  FotaModeActive = 0,
  FotaModeBackground = 1,
  FotaModeAdaptive = 2,
};


@class CBService;
@class CBDescriptor;
@class CBL2CAPChannel;

/// Delegate wrapper for forwarding CBPeripheralDelegate.
SWIFT_CLASS("_TtC10Airoha156225PeripheralDelegateWrapper")
@interface PeripheralDelegateWrapper : NSObject <CBPeripheralDelegate>
- (void)peripheralDidUpdateName:(CBPeripheral * _Nonnull)peripheral;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didModifyServices:(NSArray<CBService *> * _Nonnull)invalidatedServices;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didReadRSSI:(NSNumber * _Nonnull)RSSI error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverIncludedServicesForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverDescriptorsForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForDescriptor:(CBDescriptor * _Nonnull)descriptor error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForDescriptor:(CBDescriptor * _Nonnull)descriptor error:(NSError * _Nullable)error;
- (void)peripheralIsReadyToSendWriteWithoutResponse:(CBPeripheral * _Nonnull)peripheral;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didOpenL2CAPChannel:(CBL2CAPChannel * _Nullable)channel error:(NSError * _Nullable)error SWIFT_AVAILABILITY(ios,introduced=11.0);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// OTA configuration API. (deprecated)
SWIFT_CLASS("_TtC10Airoha156215RemoteOTAConfig")
@interface RemoteOTAConfig : NSObject
/// Get PID. Remote OTA configuration is identified by PID.
/// @return
- (NSString * _Nonnull)getPid SWIFT_WARN_UNUSED_RESULT;
/// @see #getPid()
/// @param pid
- (void)setPidWithPid:(NSString * _Nonnull)pid;
/// Get firmware version defined in remote configuration.
/// @return
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
/// @see #getVersion()
/// @param version
- (void)setVersionWithVersion:(NSString * _Nonnull)version;
/// Get OTA download URL defined in remote configuration.
/// @return
- (NSString * _Nonnull)getDownloadUrl SWIFT_WARN_UNUSED_RESULT;
/// @see #getDownloadUrl()
/// @param downloadUrl
- (void)setDownloadUrlWithDownloadUrl:(NSString * _Nonnull)downloadUrl;
/// Local path that ScanManager downloads and store the latest firmware.
/// @return
- (NSString * _Nonnull)getLocalPath SWIFT_WARN_UNUSED_RESULT;
/// @see #getLocalPath()
/// @param localPath
- (void)setLocalPathWithLocalPath:(NSString * _Nonnull)localPath;
/// Get firmware MD5 checksum defined in remote configuration.
/// @return
- (NSString * _Nonnull)getCheckSum SWIFT_WARN_UNUSED_RESULT;
/// @see #getCheckSum()
/// @param checkSum
- (void)setCheckSumWithCheckSum:(NSString * _Nonnull)checkSum;
/// Get What’s New title for specific language.
/// @param locale
/// @return
- (NSString * _Nonnull)getWhatsNewTitle SWIFT_WARN_UNUSED_RESULT;
/// @see #getWhatsNewTitle(String)
/// @param whatsNewTitle
- (void)setWhatsNewTitleWithWhatsNewTitle:(NSString * _Nonnull)whatsNewTitle;
/// Get What’s New content for specific language.
/// @param locale
/// @return
- (NSString * _Nonnull)getWhatsNewContent SWIFT_WARN_UNUSED_RESULT;
/// @see #getWhatsNewContent(String)
/// @param whatsNewContent
- (void)setWhatsNewContentWithWhatsNewContent:(NSString * _Nonnull)whatsNewContent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(uint8_t, SAMPLE_RATE, open) {
  SAMPLE_RATESR32 = 0x00,
  SAMPLE_RATESR44_1 = 0x01,
  SAMPLE_RATESR48 = 0x02,
  SAMPLE_RATESR16 = 0x03,
  SAMPLE_RATESR08 = 0x04,
  SAMPLE_RATESR88_2 = 0x05,
  SAMPLE_RATESR96 = 0x06,
};


SWIFT_CLASS("_TtC10Airoha156212SideToneInfo")
@interface SideToneInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, StatusCode, open) {
  StatusCodeSTATUS_UNKNOWN = -1,
  StatusCodeSTATUS_SUCCESS = 0,
  StatusCodeSTATUS_TIMEOUT = 1,
  StatusCodeSTATUS_CANCEL = 2,
  StatusCodeSTATUS_FAIL = 3,
};


SWIFT_CLASS("_TtC10Airoha15629TlvFormat")
@interface TlvFormat : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(uint8_t)type length:(uint16_t)length OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3.2 effective-4.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef AIROHA1562_SWIFT_H
#define AIROHA1562_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Airoha1562",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum AncMode : NSInteger;

/// <ul>
///   <li>
///     Anc status definition
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156217AirohaAncSettings")
@interface AirohaAncSettings : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// <ul>
///   <li>
///     0 - OFF;
///   </li>
///   <li>
///     1 - ANC1;
///   </li>
///   <li>
///     2 - ANC2;
///   </li>
///   <li>
///     3 - ANC3;
///   </li>
///   <li>
///     4 - PassThrough1;
///   </li>
///   <li>
///     5 - PassThrough2;
///   </li>
///   <li>
///     6 - PassThrough3;
///   </li>
///   <li>
///     7 - ANC4; // AB155x not support
///   </li>
/// </ul>
/// \param filter anc or passthru filter
///
- (void)setFilterWithFilter:(NSInteger)filter;
/// \param gain anc or passthru gain
///
- (void)setGainWithGain:(double)gain;
/// <ul>
///   <li>
///     filter:
///   </li>
///   <li>
///     0 - OFF;
///   </li>
///   <li>
///     1 - ANC1;
///   </li>
///   <li>
///     2 - ANC2;
///   </li>
///   <li>
///     3 - ANC3;
///   </li>
///   <li>
///     4 - PassThrough1;
///   </li>
///   <li>
///     5 - PassThrough2;
///   </li>
///   <li>
///     6 - PassThrough3;
///   </li>
///   <li>
///     7 - ANC4; // AB155x not support
///   </li>
/// </ul>
- (NSInteger)getFilter SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     gain: for specified filter, 0 by default.
///   </li>
/// </ul>
- (double)getGain SWIFT_WARN_UNUSED_RESULT;
- (void)setAncGainWithGain:(double)gain;
/// <ul>
///   <li>
///     get current anc gain
///   </li>
/// </ul>
- (double)getAncGain SWIFT_WARN_UNUSED_RESULT;
- (void)setPassthruGainWithGain:(double)gain;
/// <ul>
///   <li>
///     get current passthru gain
///   </li>
/// </ul>
- (double)getPassthruGain SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// <code>AncMode</code> the anc filter will use hybrid, ff or fb mode. This value only valid in setAncSetting API when filter is anc.
- (enum AncMode)getAncMode SWIFT_WARN_UNUSED_RESULT;
/// \param ancMode the anc filter will use hybrid, ff or fb mode. This value only valid in setAncSetting API when filter is anc.
///
- (void)setAncModeWithMode:(enum AncMode)mode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// Anc mode enum
typedef SWIFT_ENUM(NSInteger, AncMode, open) {
  AncModeHybrid = 0,
  AncModeFF = 1,
  AncModeFB = 2,
};

enum AirohaMessageID : NSInteger;

/// <ul>
///   <li>
///     Message is similar with command but it’s used on high-level application layer.
///   </li>
///   <li>
///   </li>
///   <li>
///     Message can be delivered by a single command, like most of commands; and also can be
///   </li>
///   <li>
///     delivered by multiple commands like DeviceInfo returned from device.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156213AirohaBaseMsg")
@interface AirohaBaseMsg : NSObject
/// <ul>
///   <li>
///     Initialize with message id and message content
///   </li>
/// </ul>
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push OBJC_DESIGNATED_INITIALIZER;
/// Message ID definition.
///
/// returns:
/// <code>AirohaMessageID</code>
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
/// Different message will contain different types of content.
///
/// returns:
/// NSObject.
- (NSObject * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
/// Check if message pushed from device.
///
/// returns:
/// true pushed from device, is not response to app request; otherwise indicates this message is response to app request.
- (BOOL)isPush SWIFT_WARN_UNUSED_RESULT;
- (void)setPushWithPush:(BOOL)push;
/// \param messageId <code>AirohaMessageID</code>
///
- (void)setMessageIdWithMessageId:(enum AirohaMessageID)messageId;
/// \param msgContent NSObject
///
- (void)setMsgContentWithMsgContent:(NSObject * _Nonnull)msgContent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSArray;

/// <ul>
///   <li>
///     Message to describe anc status info list
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156218AirohaAncStatusMsg")
@interface AirohaAncStatusMsg : AirohaBaseMsg
- (nonnull instancetype)initWithAncSettingsList:(NSArray<AirohaAncSettings *> * _Nonnull)ancSettingsList OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AirohaAudioChannel, open) {
  AirohaAudioChannelUNKNOWN = -1,
  AirohaAudioChannelNONE_CHANNEL = 0,
  AirohaAudioChannelSTEREO_LEFT = 1,
  AirohaAudioChannelSTEREO_RIGHT = 2,
};


SWIFT_CLASS("_TtC10Airoha156222AirohaAudioChannelInfo")
@interface AirohaAudioChannelInfo : NSObject
- (enum AirohaAudioChannel)getChannel SWIFT_WARN_UNUSED_RESULT;
- (void)setChannelWithAudioChannel:(enum AirohaAudioChannel)audioChannel;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AirohaDeviceListener;

/// <ul>
///   <li>
///     General device control API.
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP10Airoha156217AirohaBaseControl_")
@protocol AirohaBaseControl
/// Register global listener to device status and EQ update/info receive. Changes triggered from device should be notified by callback.
/// Such as change/get about ANC, AA, Auto Pause, Auto Off, and so on.
/// \param listener register global listener
///
- (void)registerGlobalListenerWithListener:(id <AirohaDeviceListener> _Nonnull)listener;
/// Unregister global listener to device status change.
/// \param listener unregister global listener
///
- (void)unregisterGlobalListenerWithListener:(id <AirohaDeviceListener> _Nonnull)listener;
@end



/// <ul>
///   <li>
///     Airoha Battery info
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156217AirohaBatteryInfo")
@interface AirohaBatteryInfo : NSObject
/// Get master battery level.
///
/// returns:
/// Int, the battery percentage of agent device
- (NSInteger)getMasterLevel SWIFT_WARN_UNUSED_RESULT;
- (void)setMasterLevelWithMasterLevel:(NSInteger)masterLevel;
/// Get slave level
///
/// returns:
/// Int the battery percentage of slave battery level, -1 means invalid value.
- (NSInteger)getSlaveLevel SWIFT_WARN_UNUSED_RESULT;
- (void)setSlaveLevelWithSlaveLevel:(NSInteger)slaveLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// enum AirohaConnectStatus
/// onInitialized: the status will delegate after sdk finished initial query device chip type. User should control device after received this status.
typedef SWIFT_ENUM(NSInteger, AirohaConnectStatus, open) {
  AirohaConnectStatusConnecting = 0,
  AirohaConnectStatusConnected = 1,
  AirohaConnectStatusDisconnecting = 2,
  AirohaConnectStatusDisconnected = 3,
  AirohaConnectStatusConnectFail = 4,
  AirohaConnectStatusConnectTimeout = 5,
  AirohaConnectStatusOnInitialized = 6,
  AirohaConnectStatusInitializationFail = 7,
};


/// <ul>
///   <li>
///     The delegates for connect status changed and received data from device
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP10Airoha156224AirohaConnectionListener_")
@protocol AirohaConnectionListener
/// Callback when device connection status changed.
/// <ul>
///   <li>
///     parameters status: The enum value of AirohaConnectStatus
///   </li>
/// </ul>
- (void)onStatusChangedWithStatus:(NSInteger)status;
/// Callback when message received from device.
- (void)onDataReceivedWithDeviceMessage:(AirohaBaseMsg * _Nonnull)deviceMessage;
@optional
/// Callback when raw data received from device.
/// <ul>
///   <li>
///     parameters rawData: bytes array data received from device
///   </li>
/// </ul>
- (void)onDataReceivedWithRawData:(NSData * _Nonnull)rawData;
@end

@class CentralManagerDelegateWrapper;
@class PeripheralDelegateWrapper;
@class CBCentralManager;
enum AirohaDeviceProtocol : NSInteger;
@class AirohaDevice;

/// Device connector (singleton). Used to maintain a GATT connection / iap2 session with device.
/// Connection Flow (GATT):
/// Step1: UI scan and get peripheral and manuf data (manu data is not needed when gatt over edr)
/// Step2: new AirohaDevice() and set peripheral identifier and manuf data to airoha device
/// Step3: connect and registerListener
/// Step4: Sdk will delegate AirohaConnectStatus.connected then AirohaConnectStatus.onInitialized. After received onInitialized, user can control airoha device.
/// iap2 session:
/// Step1: UI search accessory
/// Step2: new AirohaDevice() and set EAAccessory, protocol string, and iap2 preferredProtocol to airoha device
/// Step3: connect and registerListener
/// Step4: Sdk will delegate AirohaConnectStatus.connected then AirohaConnectStatus.onInitialized. After received onInitialized, user can control airoha device.
/// Note: Sdk will delegate AirohaConnectStatus.Disconnected when connection/session closed.
SWIFT_CLASS("_TtC10Airoha156215AirohaConnector")
@interface AirohaConnector : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AirohaConnector * _Nonnull Inst;)
+ (AirohaConnector * _Nonnull)Inst SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) CentralManagerDelegateWrapper * _Nonnull managerDelegateWrapper;
@property (nonatomic, readonly, strong) PeripheralDelegateWrapper * _Nonnull peripheralDelegateWrapper;
@property (nonatomic, strong) CBCentralManager * _Nonnull manager;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Get all supported protocols (int value combination).
///
/// returns:
/// 0x00000001 (Ble)
- (NSInteger)getSupportedProtocols SWIFT_WARN_UNUSED_RESULT;
/// Check if specific device protocol is supported or not. One device connector implementation can support multiple protocols.
- (BOOL)isProtocolSupportedWithDeviceProtocol:(enum AirohaDeviceProtocol)deviceProtocol SWIFT_WARN_UNUSED_RESULT;
/// Get AirohaDevice, for which we are trying to connect with.
///
/// returns:
/// the device we are trying to connect with
- (AirohaDevice * _Nullable)getDevice SWIFT_WARN_UNUSED_RESULT;
/// Connect to the device.
- (void)connectWithDevice:(AirohaDevice * _Nonnull)device;
/// Connect to the device with App or 3rd party central managed the CoreBluetooth evt.
- (void)connectUnmanagedWithDevice:(AirohaDevice * _Nonnull)device;
/// Connect to the device and register listener.
- (void)connectWithDevice:(AirohaDevice * _Nonnull)device connectionListener:(id <AirohaConnectionListener> _Nonnull)connectionListener;
/// Connect to the device and register listener with App or 3rd party central managed the CoreBluetooth evt..
- (void)connectUnmanagedWithDevice:(AirohaDevice * _Nonnull)device connectionListener:(id <AirohaConnectionListener> _Nonnull)connectionListener;
/// Disconnect from the device.
- (void)disconnect;
/// Register a listener.
/// \param connectionListener register connect status changed and data received from device
///
- (void)registerConnectionListenerWithConnectionListener:(id <AirohaConnectionListener> _Nonnull)connectionListener;
/// Unregister a listener.
/// \param connectionListener unregister listener
///
- (void)unregisterConnectionListenerWithConnectionListener:(id <AirohaConnectionListener> _Nonnull)connectionListener;
/// sendCustomCommand - If customer define new command for their project, there is a way to send a customize command of raw data.
/// warning:
/// Airoha defualt write command uuid: “43484152-2DAB-3241-6972-6F6861424C45”, if your project change the write uuid, please using your uuid
/// \param charUUID characteristic uuid string for wirte data.
///
/// \param data raw data for customer defined command.
///
///
/// returns:
/// if device have result return, library will delegate AirohaConnectionListener::onDataReceived(rawData: Data)
- (void)sendCustomCommandWithCharUUID:(NSString * _Nonnull)charUUID data:(NSData * _Nonnull)data;
/// getClassicMacAddr - Get classic mac address of the device that connected on iphone
/// warning:
/// Get the address from input and output audio route. This API is not a formal way to get classic bt address. It may be deprecated in the future.
///
/// returns:
/// string array of address list or nil represent not found
- (NSArray<NSString *> * _Nullable)getClassicMacAddr SWIFT_WARN_UNUSED_RESULT;
@end

enum FlashSize : NSInteger;

/// AirohaDFUInfo
/// After invoked requestDfuInfo (sync API), lib will return AirohaDFUInfo object that contains the information of fota state, fw version, agent channel, rofs version, flash size
SWIFT_CLASS("_TtC10Airoha156213AirohaDFUInfo")
@interface AirohaDFUInfo : NSObject
@property (nonatomic, readonly) BOOL isReadyToUpdateFileSystem;
@property (nonatomic, readonly, copy) NSString * _Nonnull agentFwVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull partnerFwVersion;
@property (nonatomic, readonly) BOOL isAgentRightChannel;
@property (nonatomic, readonly) BOOL isPartnerRightChannel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFotaState:(uint16_t)fotaState fwVersion:(NSString * _Nonnull)fwVersion flashSize:(enum FlashSize)flashSize isReadyToUpdateFileSystem:(BOOL)isReadyToUpdateFileSystem OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use getFwVersion instead");
- (NSString * _Nonnull)getFwVersion SWIFT_WARN_UNUSED_RESULT;
- (enum FlashSize)getFlashSize SWIFT_WARN_UNUSED_RESULT;
- (void)copyFrom:(AirohaDFUInfo * _Nonnull)from;
- (void)reset;
@end

typedef SWIFT_ENUM(NSInteger, FotaStage, open) {
  FotaStageReadyToStart = 0,
  FotaStageReadyToApply = 1,
  FotaStageNeedSpecialUpgrade = 2,
};

typedef SWIFT_ENUM(NSInteger, FlashSize, open) {
  FlashSizeFLASH_2M = 0,
  FlashSizeFLASH_4M = 1,
  FlashSizeUNKNOWN = 2,
};

enum AirohaDeviceRole : NSInteger;
@class CBPeripheral;
@class EAAccessory;

/// AirohaDevice:
/// <ol>
///   <li>
///     A parameter in AirohaConnector::connect to specific the device to connect.
///     <ol>
///       <li>
///         if using ble, user has to set peripheral uuid and manufactuerData at first before connecting ble.
///       </li>
///       <li>
///         if using gatt over edr, user has to set peripheral uuid at first before connecting gatt over edr.
///       </li>
///       <li>
///         If using iap2, user has to set accessory and protocolString at first before making iap2 session.
///       </li>
///     </ol>
///   </li>
///   <li>
///     The callback value in AirohaDeviceControl::getDeviceInfo API.
///     After the API calls, product/vendor id, MAC address, …etc information will be included in AirohaDevice.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC10Airoha156212AirohaDevice")
@interface AirohaDevice : NSObject
/// Set device vendor id.
- (void)setDeviceVidWithDeviceVid:(NSString * _Nonnull)deviceVid;
/// Get device vendor id.
///
/// returns:
/// String, device vendor id
- (NSString * _Nonnull)getDeviceVid SWIFT_WARN_UNUSED_RESULT;
/// Set device product id.
- (void)setDevicePidWithDevicePid:(NSString * _Nonnull)devicePid;
/// Get device product id.
///
/// returns:
/// String, device product id
- (NSString * _Nonnull)getDevicePid SWIFT_WARN_UNUSED_RESULT;
/// Set device model id.
- (void)setDeviceMidWithDeviceMid:(NSString * _Nonnull)deviceMid;
/// Get device model ID.
///
/// returns:
/// String, device model id
- (NSString * _Nonnull)getDeviceMid SWIFT_WARN_UNUSED_RESULT;
/// Set device MAC address.
- (void)setDeviceMACWithDeviceMAC:(NSString * _Nonnull)deviceMAC;
/// Get MAC address of the device.
///
/// returns:
/// String, device MAC address
- (NSString * _Nonnull)getDeviceMAC SWIFT_WARN_UNUSED_RESULT;
/// Set BLE address.
- (void)setBleAddressWithBleAddress:(NSString * _Nonnull)bleAddress;
/// Get ble address of the device
///
/// returns:
/// String, Ble address. This field is empty because we can not get ble address currently.
- (NSString * _Nonnull)getBleAddress SWIFT_WARN_UNUSED_RESULT;
/// Set device name
- (void)setDeviceNameWithDeviceName:(NSString * _Nonnull)deviceName;
/// Get device name.
///
/// returns:
/// String, device name
- (NSString * _Nonnull)getDeviceName SWIFT_WARN_UNUSED_RESULT;
/// Set battery info.
- (void)setBatteryLevelWithBatteryLevel:(NSInteger)batteryLevel;
/// Get device (master) battery info
/// CAUTION: Please use getBatteryInfo API instead.
///
/// returns:
///
- (NSInteger)getBatteryLevel SWIFT_WARN_UNUSED_RESULT;
/// Set device role.
- (void)setRoleWithRole:(enum AirohaDeviceRole)role;
/// Get device role.
///
/// returns:
/// AirohaDeviceRole
- (enum AirohaDeviceRole)getRole SWIFT_WARN_UNUSED_RESULT;
/// Set connectable.
- (void)setConnectableWithConnectable:(BOOL)connectable;
/// Check if the device is connectable or not.
///
/// returns:
/// Bool
- (BOOL)isConnectable SWIFT_WARN_UNUSED_RESULT;
/// Set device scanned timestamp.
- (void)setScannedTimestampWithScannedTimestamp:(NSInteger)scannedTimestamp;
/// Get device scanned timestamp.
///
/// returns:
/// CLong, it is 0 currently
- (long)getScannedTimestamp SWIFT_WARN_UNUSED_RESULT;
/// Set CRC.
- (void)setCrcWithCrc:(NSString * _Nonnull)crc;
/// Get CRC included from device broadcast.
///
/// returns:
/// String, it is empty currently
- (NSString * _Nonnull)getCrc SWIFT_WARN_UNUSED_RESULT;
/// Set preferred protocol.
/// \param preferredProtocol AirohaDeviceProtocol, currently support ble or iap2
///
- (void)setPreferredProtocolWithPreferredProtocol:(enum AirohaDeviceProtocol)preferredProtocol;
/// Get preferred connection protocol.
- (enum AirohaDeviceProtocol)getPreferredProtocol SWIFT_WARN_UNUSED_RESULT;
/// Set device uid.
- (void)setDeviceUidWithDeviceUid:(NSString * _Nonnull)deviceUid;
/// Convert to a string, can be used as UID of this AirohaDevice.
/// Example: VID+PID+MAC+PROTOCOL.
///
/// returns:
/// String, it is empty currently
- (NSString * _Nonnull)getDeviceUid SWIFT_WARN_UNUSED_RESULT;
/// Set device firmware version.
- (void)setFirmwareVerWithFirmwareVer:(NSString * _Nonnull)firmwareVer;
/// Get device firmware version
///
/// returns:
/// String, fw version
- (NSString * _Nonnull)getFirmwareVer SWIFT_WARN_UNUSED_RESULT;
/// Set audio channel.
- (void)setChannelWithChannel:(enum AirohaAudioChannel)channel;
/// Get current channel
///
/// returns:
/// AirohaAudioChannel, left or right
- (enum AirohaAudioChannel)getChannel SWIFT_WARN_UNUSED_RESULT;
/// Set device peripheral which is the necesaary information for BLE connection.
/// \param peripheral device peripheral from scanning or retrieving.
///
- (void)setPeripheralWithPeripheral:(CBPeripheral * _Nullable)peripheral SWIFT_DEPRECATED_MSG("Please use setPeripheralID instead");
/// Get device peripheral which is the necesaary information for BLE connection.
- (CBPeripheral * _Nullable)getPeripheral SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use getPeripheralID instead");
/// Set device peripheral UUID which is the necesaary information for BLE connection.
/// \param id device peripheral identifier from scanning or retrieving.
///
- (void)setPeripheralID:(NSUUID * _Nonnull)id;
/// Get device peripheral UUID which is the necesaary information for BLE connection.
- (NSUUID * _Nonnull)getPeripheralID SWIFT_WARN_UNUSED_RESULT;
/// Set manufacturing data from ble scan which is used to fota reconnection.
/// \param data manufacturing data used to idendify the original device when reconnection.
///
- (void)setManufactuerDataWithData:(NSData * _Nullable)data;
/// Get manufacturing data from ble scan which is used to fota reconnection.
- (NSData * _Nullable)getManufactuerData SWIFT_WARN_UNUSED_RESULT;
/// Set device accessory which is the necesaary information for IAP2 session estainbulish.
/// \param accessory device accessory for using iap2 channel
///
- (void)setEAAccessoryWithAccessory:(EAAccessory * _Nullable)accessory;
/// Get device accessory which is the necesaary information for IAP2 session estainbulish.
- (EAAccessory * _Nullable)getEAAccessory SWIFT_WARN_UNUSED_RESULT;
/// Set session protocol string which is the necesaary information for IAP2 session estainbulish.
/// \param protocolString protocol string
///
- (void)setProtocolStringWithProtocolString:(NSString * _Nonnull)protocolString;
/// Get session protocol string which is the necesaary information for IAP2 session estainbulish.
- (NSString * _Nonnull)getProtocolString SWIFT_WARN_UNUSED_RESULT;
/// Set mtu size.
- (void)setMtuSizeWithMtuSize:(NSInteger)mtuSize;
/// Get mtu size.
///
/// returns:
/// Int, mtu size
- (NSInteger)getMtuSize SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AirohaMyBudsInfo;
@class AirohaGestureInfo;
@class SideToneInfo;

SWIFT_PROTOCOL("_TtP10Airoha156219AirohaDeviceControl_")
@protocol AirohaDeviceControl <AirohaBaseControl>
/// Get all the device info as AirohaDevice.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code: in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg:  in deviceCallback is an object of <code>AirohaDeviceInfoMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.DEVICE_INFO</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> should be an array of <code>AirohaDevice</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getDeviceInfoWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set device name.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.DEVICE_NAME</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> type is Bool, true means success.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param name the device name to be renewed
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setDeviceNameWithName:(NSString * _Nonnull)name listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get enable ANC.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaAncStatusMsg</code>, which
///     <ul>
///       <li>
///         AirohaAncStatusMsg#getMsgID() is <code>AirohaMessageID.ANC_STATUS</code>,
///       </li>
///       <li>
///         AirohaAncStatusMsg#getMsgContent() includes enabled ANC setting.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getAncSettingWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set enable ANC status
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaAncStatusMsg</code>, which
///     <ul>
///       <li>
///         AirohaAncStatusMsg#getMsgID() is <code>AirohaMessageID.ANC_STATUS</code>,
///       </li>
///       <li>
///         AirohaAncStatusMsg#getMsgContent() only includes new changed Anc setting.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param anc new ANC setting
///
/// \param saveOrNot true save current AncSetting, otherwise only set current AncSetting.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setAncSettingWithAnc:(AirohaAncSettings * _Nonnull)anc saveOrNot:(BOOL)saveOrNot listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get AutoPause status, false for OFF, true for ON.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.AUTO_PAUSE</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is the current AutoPause status, type is Bool, value can be:
///         <ul>
///           <li>
///             true – ON
///           </li>
///           <li>
///             false – OFF
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getAutoPlayPauseStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set Auto Play Pause. Means if detected device is taken off, it should auto pause or not.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.AUTO_PAUSE</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is the new AutoPause status, type is Bool, value can be:
///         <ul>
///           <li>
///             true – ON
///           </li>
///           <li>
///             false – OFF
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param enableOrNot new AutoPause status.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setAutoPlayPauseStatusWithEnableOrNot:(BOOL)enableOrNot listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get auto power off status: 0 means disable, non 0 means ON and the value is Auto Power Off interval,
/// means the device should auto power off for some condition, for example, no music playing for some time,
/// and so on.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.AUTO_POWER_OFF</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is the current AutoPause status, type is Int, value can be:
///         <ul>
///           <li>
///             0 for OFF
///           </li>
///           <li>
///             other Non-zero means On and and the value is AutoOff interval. Means the device should auto power off for some condition, for example, no music playing for some time, and so on.
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getAutoPowerOffStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set auto power off status.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.AUTO_PAUSE</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is the new AutoPause status, type is Int, value can be:
///         <ul>
///           <li>
///             0 for OFF
///           </li>
///           <li>
///             other Non-zero means On and and the value is AutoOff interval. Means the device should auto power off for some condition, for example, no music playing for some time, and so on.
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param autoPowerOff 0 means Off, non 0 means ON and the value is Auto Power Off interval, unit minute. max value 360 minutes.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setAutoPowerOffStatusWithAutoPowerOff:(NSInteger)autoPowerOff listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get Multi-AI status, which one is currently activated.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.MULTI_AI_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current AI value, type is Int, value can be:
///         <ul>
///           <li>
///             1 for Google AI;
///           </li>
///           <li>
///             2 for Amazon Alexa;
///           </li>
///           <li>
///             3 for SIRI;
///           </li>
///           <li>
///             4 for Tecent XiaoWei;
///           </li>
///           <li>
///             5 for XiaoAi;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getMultiAIStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set Multi-AI status
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.MULTI_AI_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is new AI value, type is Integer, value can be:
///         <ul>
///           <li>
///             1 for Google AI;
///           </li>
///           <li>
///             2 for Amazon Alexa;
///           </li>
///           <li>
///             3 for SIRI;
///           </li>
///           <li>
///             4 for Tecent XiaoWei;
///           </li>
///           <li>
///             5 for XiaoAi;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param ai 
/// 1 for Google AI;
/// 2 for Amazon Alexa;
/// 3 for SIRI;
/// 4 for Tecent XiaoWei;
/// 5 for XiaoAi.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setMultiAIStatusWithAi:(NSInteger)ai listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get FindMyBuds setting.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaMyBudsMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaMyBudsMsg#getMsgID()</code> is <code>AirohaMessageID.FIND_ME_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaMyBudsMsg#getMsgContent()</code> is current MyBuds status, which type is <code>AirohaMyBudsInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getFindMyBudsWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set FindMyBuds settings.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
/// </ul>
/// \param myBudsInfo AirohaMyBudsInfo
///
/// \param listener local listener. If nil, then only callback to global listener
///
/// \param msg in deviceCallback is an object of <code>AirohaMyBudsMsg</code>, which
/// <ul>
///   <li>
///     <code>AirohaMyBudsMsg#getMsgID()</code> is <code>AirohaMessageID.FIND_ME_STATUS</code>,
///   </li>
///   <li>
///     <code>AirohaMyBudsMsg#getMsgContent()</code> is new MyBuds status, type is <code>AirohaMyBudsInfo</code>
///   </li>
/// </ul>
///
- (void)setFindMyBudsWithMyBudsInfo:(AirohaMyBudsInfo * _Nonnull)myBudsInfo listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get gesture action with specified gestureId.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaGestureMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaGestureMsg.getMsgID()</code> is <code>AirohaMessageID.GESTURE_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaGestureMsg.getMsgContent()</code> is current Gesture status, type is <code>AirohaGestureInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param gestureId 
/// 0x01 - Single click on left;
/// 0x02 - Single click on right;
/// 0x03 - Double click on left;
/// 0x04 - Double click on right;
/// 0x05 - Long press on left;
/// 0x06 - Long press on right;
/// 0x07 - Triple click on left;
/// 0x08 - Triple click on right;
/// 0x09 - DLong press on left;
/// 0x0A - DLong press on right;
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getGestureStatusWithGestureId:(NSInteger)gestureId listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set gesture configuration.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaGestureMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaGestureMsg.getMsgID()</code> is <code>AirohaMessageID.GESTURE_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaGestureMsg.getMsgContent()</code> is new Gesture status, type is [<code>AirohaGestureInfo</code>]
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param gestureInfoList see <code>AirohaGestureInfo</code>
/// gestureId:
/// 0x01 - Single click on left;
/// 0x02 - Single click on right;
/// 0x03 - Double click on left;
/// 0x04 - Double click on right;
/// 0x05 - Long press on left;
/// 0x06 - Long press on right;
/// 0x07 - Triple click on left;
/// 0x08 - Triple click on right;
/// 0x09 - DLong press on left;
/// 0x0A - DLong press on right;
/// actionId
/// 0x00 - Action None;
/// 0x01 - Volume Up;
/// 0x02 - Volume Down;
/// 0x03 - ANC;
/// 0x05 - Pass Through;
/// 0x06 - Next Track;
/// 0x07 - Previous Track;
/// 0x08 - Play Pause;
/// 0xA0 - Wake Up Siri;
/// 0xA1 - Wake Up Siri Notify;
/// 0xA2 - Gsound Cancel;
/// 0xA3 - Gsound Notify;
/// 0xA4 - Gsound Query;
/// 0xA5 - AMA Tap;
/// 0xA6 - AMA Hold;
/// 0xA7 - Xiaowei Tap;
/// 0xA8 - Xiaowei Hold;
/// 0xA9 - XiaoAi Tap;
/// 0xAA - XiaoAi Hold;
/// 0xD1 - Action Default;
/// 0xD2 - Share Mode Switch;
/// 0xD3 - Share Mode Follower Switch;
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setGestureStatusWithGestureInfoList:(NSArray<AirohaGestureInfo *> * _Nonnull)gestureInfoList listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Reset gesture configuration.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaGestureMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaGestureMsg.getMsgID()</code> is <code>AirohaMessageID.GESTURE_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaGestureMsg.getMsgContent()</code> is new Gesture status, type is [<code>AirohaGestureInfo</code>]
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param gesture 
/// AirohaGestureInfo#LEFT_ALL reset all gesture on left,
/// AirohaGestureInfo#RIGHT_ALL reset all gesture on right.
/// AirohaGestureInfo#ALL reset all gesture both on left and right.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)resetGestureStatusWithGesture:(NSInteger)gesture listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Check whether AI OTA in progress or not. Since AI OTA is highest priority, we need to check the status before start firmware OTA.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaOTAInfoMsg,</code> which
///     <ul>
///       <li>
///         <code>AirohaOTAInfoMsg.getMsgID()</code> is <code>AirohaMessageID.FOTA_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaOTAInfoMsg.getMsgContent()</code> is new OTA status, type is <code>AirohaOTAInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getRunningOTAInfoWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Check TWS connection status
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.TWS_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current TWS connection status, type is Bool, value can be:
///         <ul>
///           <li>
///             true - partner connected;
///           </li>
///           <li>
///             false - partner disconnected;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getTwsConnectStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get SideTone State.
/// note:
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SIDETONE_LEVEL,</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current sideTone level, type is <code>SideToneInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getSideToneStateWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set SideTone State.
/// note:
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///   </li>
///   <li>
///     <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SIDETONE_LEVEL</code>,
///   </li>
///   <li>
///     <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current sideTone level, type is <code>SideToneInfo</code>
///   </li>
/// </ul>
/// \param info <code>SideToneInfo</code>
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setSideToneStateWithInfo:(SideToneInfo * _Nonnull)info listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get current sealing status.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SEALING_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current sealing value, type is <code>AirohaSealingInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getSealingStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get current battery status.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.BATTERY_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current battery status, type is <code>AirohaBatteryInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getBatteryInfoWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get current fw version.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.FIRMWARE_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current fw version, type is [String]
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getFirmwareVerWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get current smart switch settings.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param message in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SMART_SWITCH_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current smart switch value, type is Int, value can be:
///         <ul>
///           <li>
///             1 - Default: High audio quality / Normal Latency;
///           </li>
///           <li>
///             2 - Movie/Gaming mode: Low audio quality / Low Latency;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getSmartSwitchStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set smart switch status
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param message in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SMART_SWITCH_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is new smart switch value, type is Int, value can be:
///         <ul>
///           <li>
///             1 - Default: High audio quality / Normal Latency;
///           </li>
///           <li>
///             2 - Movie/Gaming mode: Low audio quality / Low Latency;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param musicSettings 
/// 1 - Default: High audio quality / Normal Latency;
/// 2 - Movie/Gaming mode: Low audio quality / Low Latency;
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setSmartSwitchStatusWithMusicSettings:(NSInteger)musicSettings listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get touch status
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.TOUCH_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current touch information, type is Int, Value can be:
///         <ul>
///           <li>
///             0 - Touch off;
///           </li>
///           <li>
///             1 - Touch on;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getTouchStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set touch status
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.TOUCH_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is touch status, type is Int, value can be:
///         <ul>
///           <li>
///             0 - Touch off;
///           </li>
///           <li>
///             1 - Touch on;
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param touchOnOff 
/// 0 - Touch off;
/// 1 - Touch on;
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setTouchStatusWithTouchOnOff:(NSInteger)touchOnOff listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get Share Mode state.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SHARE_MODE_STATE</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current share mode information, type is <code>AirohaShareModeInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getShareModeStateWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set Share Mode state
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.SHARE_MODE_STATE,</code>
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is share mode information, type is <code>AirohaShareModeInfo</code>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param shareModeOnOff 
/// 0 - Share Mode off;
/// 1 - Share Mode agent on;
/// 2 - Share Mode follower on;
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setShareModeStateWithShareModeOnOff:(NSInteger)shareModeOnOff listener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get current advanced passthrough status.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.ADVANCED_PASSTHRU_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is current advanced passthrough status, type is <code>Bool</code>, Value can be:
///         <ul>
///           <li>
///             false - disable
///           </li>
///           <li>
///             true - enable
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getAdvancedPassThruStatusWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set advanced passthrough status.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaBaseMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgID()</code> is <code>AirohaMessageID.ADVANCED_PASSTHRU_STATUS,</code>
///       </li>
///       <li>
///         <code>AirohaDeviceInfoMsg.getMsgContent()</code> is advanced passthrough status, type is <code>Bool</code>
///         <ul>
///           <li>
///             false - disable
///           </li>
///           <li>
///             true - enable
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param enable 
/// false - diable
/// true - enable
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setAdvancedPassThruStatusWithEnable:(BOOL)enable listener:(id <AirohaDeviceListener> _Nullable)listener;
@end


/// <ul>
///   <li>
///     Message to describe device info list.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156219AirohaDeviceInfoMsg")
@interface AirohaDeviceInfoMsg : AirohaBaseMsg
- (nonnull instancetype)initWithDeviceList:(NSArray<AirohaDevice *> * _Nonnull)deviceList OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end

enum StatusCode : NSInteger;

SWIFT_PROTOCOL("_TtP10Airoha156220AirohaDeviceListener_")
@protocol AirohaDeviceListener
/// General callback of AirohaDeviceControl and AirohaEQControl get APIs.
/// \param code code StatusCode.STATUS_SUCCESS of means success, others for fail with reasons.
///
/// \param msg return value, data format refer to the related API in AirohaDeviceStatusControl and AirohaEQControl
///
- (void)onReadWithCode:(enum StatusCode)code msg:(AirohaBaseMsg * _Nonnull)msg;
/// General callback of AirohaDeviceControl and AirohaEQControl set/change/update APIs
/// \param code code StatusCode.STATUS_SUCCESS of means success, others for fail with reasons.
///
/// \param msg return value, data format refer to the related API in AirohaDeviceStatusControl and AirohaEQControl
///
- (void)onChangedWithCode:(enum StatusCode)code msg:(AirohaBaseMsg * _Nonnull)msg;
@optional
/// General callback of AirohaDeviceControl and AirohaEQControl set/change/update APIs
/// \param code code StatusCode.STATUS_SUCCESS of means success, others for fail with reasons.
///
/// \param msg return value, data format refer to the related API in AirohaDeviceStatusControl and AirohaEQControl
///
- (void)onDebugWithCode:(enum StatusCode)code msg:(AirohaBaseMsg * _Nonnull)msg;
@end

/// <ul>
///   <li>
///     Enum of  protocol might be used, mainly use BLE for now.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AirohaDeviceProtocol, open) {
  AirohaDeviceProtocolUNKNOWN = 0x0,
  AirohaDeviceProtocolBLE = 0x00000001,
  AirohaDeviceProtocolGATT_BR_EDR = 0x00100000,
  AirohaDeviceProtocolIAP2 = 0x01000000,
};

/// <ul>
///   <li>
///     Enum of device roles
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AirohaDeviceRole, open) {
  AirohaDeviceRoleUNKNOWN = 0,
  AirohaDeviceRoleAGENT = 1,
  AirohaDeviceRolePARTNER = 2,
};

@class AirohaEQPayload;

SWIFT_PROTOCOL("_TtP10Airoha156215AirohaEQControl_")
@protocol AirohaEQControl <AirohaBaseControl>
/// Get all EQ settings.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaEQStatusMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaEQStatusMsg.getMsgID()</code> is <code>AirohaMessageID.PEQ_INFO</code>,
///       </li>
///       <li>
///         <code>AirohaEQStatusMsg#getMsgContent()</code> is current running EQ settings, type is an array of <code>AirohaEQSettings</code>
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>AirohaEQSettings.getEqPayload()</code> is nil for preset EQ settings, <code>AirohaEQPayload</code> object for customized EQ.
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getAllEQSettingsWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Get EQ index that currently turned on.
/// <code>AirohaDeviceListener.onRead(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaEQStatusMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaEQStatusMsg.getMsgID()</code> is <code>AirohaMessageID.RUNNING_EQ_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaEQStatusMsg#getMsgContent()</code> is current running EQ setting, type is an array of <code>AirohaEQSettings</code>
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>AirohaEQSettings.getEqPayload()</code> is nil for preset EQ settings, <code>AirohaEQPayload</code> object for customized EQ.
///   </li>
/// </ul>
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)getRunningEQSettingWithListener:(id <AirohaDeviceListener> _Nullable)listener;
/// Set enable/disable EQ.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaEQStatusMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaEQStatusMsg.getMsgID()</code> is <code>AirohaMessageID.PEQ_INFO</code>,
///       </li>
///       <li>
///         <code>AirohaEQStatusMsg#getMsgContent()</code> is new changed EQ settings, type is an array <code>AirohaEQSettings</code>
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>AirohaEQSettings.getEqPayload()</code> is nil for preset EQ settings, <code>AirohaEQPayload</code> object for customized EQ.
///   </li>
/// </ul>
/// \param categoryId preset ID scope in [1 ~ 100], customized EQ ID start with 101.
/// 0 - Disable EQ
/// 1 - Preset EQ 1
/// 2 - Preset EQ 2
/// 3 - Preset EQ 3,
/// …
/// 101 - Customized EQ 1
/// 102 - Customized EQ 2
/// 103 - Customized EQ 3
///
/// \param payload might be nil for preset EQ.
///
/// \param saveOrNot true save current payload, otherwise only set current payload.
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)setEQSettingWithCategoryId:(NSInteger)categoryId payload:(AirohaEQPayload * _Nullable)payload saveOrNot:(BOOL)saveOrNot listener:(id <AirohaDeviceListener> _Nullable)listener;
/// The specific preset EQ willl be replaced by customer eq.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaEQStatusMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaBaseMsg.getMsgID()</code> is <code>AirohaMessageID.REPLACE_EQ_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaBaseMsg.getMsgContent()</code> is Bool type. true means success.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// warning:
/// You should not call this API. It is for special usage.
/// \param categoryIdFrom the category id of customer EQ
///
/// \param categoryIdTo the category id of preset EQ
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)replaceEQSettingWithCategoryIdFrom:(NSInteger)categoryIdFrom categoryIdTo:(NSInteger)categoryIdTo listener:(id <AirohaDeviceListener> _Nullable)listener;
/// The specific preset EQ willl be reset to its original setting.
/// <code>AirohaDeviceListener.onChanged(code:msg)</code> callback will indicate the operation result.
/// <ul>
///   <li>
///     param code in deviceCallback, STATUS_SUCCESS of means success, others for fail with reasons.
///   </li>
///   <li>
///     param msg in deviceCallback is an object of <code>AirohaEQStatusMsg</code>, which
///     <ul>
///       <li>
///         <code>AirohaBaseMsg.getMsgID()</code> is <code>AirohaMessageID.RESET_EQ_STATUS</code>,
///       </li>
///       <li>
///         <code>AirohaBaseMsg.getMsgContent()</code> is Bool type. true means success.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// warning:
/// You should not call this API. It is for special usage.
/// \param presetCategoryId the category id of preset EQ
///
/// \param listener local listener. If nil, then only callback to global listener
///
- (void)resetEQSettingWithPresetCategoryId:(NSInteger)presetCategoryId listener:(id <AirohaDeviceListener> _Nullable)listener;
@end

enum SAMPLE_RATE : uint8_t;
@class EQIDParam;

/// <ul>
///   <li>
///     EQ payload definition. The details of the customized EQ
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156215AirohaEQPayload")
@interface AirohaEQPayload : NSObject
/// For the usage on special UI spec
- (NSInteger)getIndex SWIFT_WARN_UNUSED_RESULT;
/// For the usage on special UI spec
- (void)setIndexWithIndex:(NSInteger)index;
/// No use currently.
- (float)getCalibration SWIFT_WARN_UNUSED_RESULT;
/// No use currently.
- (void)setCalibrationWithCalibration:(float)calibration;
/// Get sample rate
- (enum SAMPLE_RATE)getSampleRate SWIFT_WARN_UNUSED_RESULT;
/// Set sample rate
- (void)setSampleRateWithSampleRate:(enum SAMPLE_RATE)sampleRate;
/// Get all sample rates
/// warning:
/// This method is for objcective c. If you are using swift, please invoke getAllSampleRates instead
///
/// returns:
/// The NSArray with type SAMPLE_RATE
- (NSArray * _Nullable)getAllSampleRates_Objc SWIFT_WARN_UNUSED_RESULT;
/// Set all sample rates
/// warning:
/// This method is for objcective c. If you are using swift, please invoke setAllSampleRates instead
/// <ul>
///   <li>
///     parameters sampleRateArray: The NSArray with type SAMPLE_RATE
///   </li>
/// </ul>
- (void)setAllSampleRates_ObjcWithSampleRateArray:(NSArray * _Nonnull)sampleRateArray;
/// Get master gain
- (float)getLeftGain SWIFT_WARN_UNUSED_RESULT;
/// Set master gain
- (void)setLeftGainWithLeftGain:(float)leftGain;
/// No use currently, you should use getLeftGain for getting master gain.
- (float)getRightGain SWIFT_WARN_UNUSED_RESULT;
/// No use currently, you should use setLeftGain for setting master gain.
- (void)setRightGainWithRightGain:(float)rightGain;
/// Get band count
- (float)getBandCount SWIFT_WARN_UNUSED_RESULT;
/// Set band count
- (void)setBandCountWithBandCount:(float)bandCount;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Get list of band infos
/// returns might be nil.
- (NSArray<EQIDParam *> * _Nullable)getIirParams SWIFT_WARN_UNUSED_RESULT;
/// Set list of band infos
- (void)setIirParamsWithIirParams:(NSArray<EQIDParam *> * _Nonnull)iirParams;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     EQ band infomation
///   </li>
/// </ul>
SWIFT_CLASS("_TtCC10Airoha156215AirohaEQPayload9EQIDParam")
@interface EQIDParam : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// <ul>
///   <li>
///     bandType: no use currently. Just specify to be 0
///   </li>
///   <li>
///     gainValue: the gain of the band
///   </li>
///   <li>
///     frequency: the frequency of the band
///   </li>
///   <li>
///     qValue: the q value of the band
///   </li>
/// </ul>
- (nonnull instancetype)initWithBandType:(NSInteger)bandType gainValue:(float)gainValue frequency:(float)frequency qValue:(float)qValue OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)getBandType SWIFT_WARN_UNUSED_RESULT;
- (void)setBandTypeWithBandType:(NSInteger)bandType;
- (float)getGainValue SWIFT_WARN_UNUSED_RESULT;
- (void)setGainValueWithGainValue:(float)gainValue;
- (float)getFrequency SWIFT_WARN_UNUSED_RESULT;
- (void)setFrequencyWithFrequency:(float)frequency;
- (float)getQValue SWIFT_WARN_UNUSED_RESULT;
- (void)setQValueWithQValue:(float)qValue;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// <ul>
///   <li>
///     eq status definition
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156216AirohaEQSettings")
@interface AirohaEQSettings : NSObject
/// <ul>
///   <li>
///     get categoryId number
///   </li>
///   <li>
///     1 - Preset EQ 1,
///   </li>
///   <li>
///     2 - Preset EQ 2,
///   </li>
///   <li>
///     3 - Preset EQ 3,
///   </li>
///   <li>
///     …
///   </li>
///   <li>
///     101 - Customized EQ 1,
///   </li>
///   <li>
///     102 - Customized EQ 2,
///   </li>
///   <li>
///     103 - Customized EQ 3,
///   </li>
///   <li>
///     104 - Customized EQ 4,
///   </li>
/// </ul>
- (NSInteger)getCategoryId SWIFT_WARN_UNUSED_RESULT;
- (void)setCategoryIdWithId:(NSInteger)id;
/// <ul>
///   <li>
///     status:
///   </li>
///   <li>
///     0 for OFF;
///   </li>
///   <li>
///     1 for ON;
///   </li>
/// </ul>
- (NSInteger)getStatus SWIFT_WARN_UNUSED_RESULT;
- (void)setStatusWithStatus:(NSInteger)status;
/// <ul>
///   <li>
///     get the details of this customized eq
///   </li>
/// </ul>
- (AirohaEQPayload * _Nullable)getEqPayload SWIFT_WARN_UNUSED_RESULT;
- (void)setEqPayloadWithEqPayload:(AirohaEQPayload * _Nullable)eqPayload;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Message to describe device info list.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156217AirohaEQStatusMsg")
@interface AirohaEQStatusMsg : AirohaBaseMsg
- (nonnull instancetype)initWithMsgId:(enum AirohaMessageID)msgId eqList:(NSArray<AirohaEQSettings *> * _Nonnull)eqList OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end

@class RemoteOTAConfig;
enum AirohaOTAStatus_Objc : NSInteger;
enum FotaTarget : NSInteger;
@class AirohaROFSVersion;
@class FotaSettings;
@protocol AirohaFOTAStatusListener_Objc;
@class NSNumber;

/// warning:
/// This protocol is for objcective c. If you are using swift, please use AirohaFOTAControl instead
SWIFT_PROTOCOL("_TtP10Airoha156222AirohaFOTAControl_Objc_")
@protocol AirohaFOTAControl_Objc
/// Get AirohaDevice this AirohaOTATask is running for.
///
/// returns:
/// the device which is currently running ota
- (AirohaDevice * _Nullable)getDevice SWIFT_WARN_UNUSED_RESULT;
/// Get RemoteOTAConfig this AirohaOTATask is using.
///
/// returns:
/// RemoteOTAConfig
- (RemoteOTAConfig * _Nonnull)getOtaConfig SWIFT_WARN_UNUSED_RESULT;
/// Get current AirohaOTATask status.
/// This method is for objcective c.
/// warning:
/// This method is for objcective c. If you are using swift, please invoke getOtaStatus instead
///
/// returns:
/// AirohaOTAStatus which means current ota status
- (enum AirohaOTAStatus_Objc)getOTAStatus_Objc SWIFT_WARN_UNUSED_RESULT;
/// Get current data transfer progress, number of permillage.
///
/// returns:
/// return the number of permillage
- (NSInteger)getCurrentProgress SWIFT_WARN_UNUSED_RESULT;
/// Request DFU (Device Firmware Upgrade) info on device.
/// \param type a parameter used to decide to request single or dual dfu info.
///
///
/// returns:
/// return device info on device
- (AirohaDFUInfo * _Nullable)requestDFUInfoWithType:(enum FotaTarget)type SWIFT_WARN_UNUSED_RESULT;
/// Request ROFS Version on device.
///
/// returns:
/// return ROFS Version on device
- (AirohaROFSVersion * _Nullable)requestROFSVersionWithType:(enum FotaTarget)type SWIFT_WARN_UNUSED_RESULT;
/// A plugin API to provide an opportunity to initialize the OTA data transfer.
/// For some platforms, app or client needs to explicitly tell the device such as flash address and so on.
- (void)preTransferInit;
/// Request to start data transfer with given FotaSettings.
/// This method is for objcective c.
/// warning:
/// This method is for objcective c. If you are using swift, please invoke startDataTransfer instead
/// \param fotaSettings a parameter used to config fota settings like ota bin path, battery threshold, and background mode fota.
///
/// \param listener notify ota status and the data transfer progress changed.
///
- (BOOL)startDataTransfer_ObjcWithFotaSettings:(FotaSettings * _Nonnull)fotaSettings listener:(id <AirohaFOTAStatusListener_Objc> _Nonnull)listener SWIFT_WARN_UNUSED_RESULT;
/// Request to stop data transfer.
/// User may need to stop OTA transfer for higher priority actions.
- (BOOL)stopDataTransfer SWIFT_WARN_UNUSED_RESULT;
/// A plugin API to provide an opportunity to clean up after OTA data transfer if needs.
- (void)postTransferCleanup;
/// Request device to apply new transfer after data transfer completed. (for objective c)
/// \param threshold battery level check when applyNewFirmware. If this paramter is nil, the value will be fotaSettings.getBatteryLevelThrd().
///
- (BOOL)applyNewFirmwareWithThreshold:(NSNumber * _Nullable)threshold SWIFT_WARN_UNUSED_RESULT;
/// Register data transfer listener.
/// warning:
/// This method is for objcective c. If you are using swift, please invoke registerOTAStatusListener instead
/// \param listener notify ota status and the data transfer progress changed.
///
- (void)registerOTAStatusListener_ObjcWithListener:(id <AirohaFOTAStatusListener_Objc> _Nonnull)listener;
/// Unregister data transfer listener.
/// warning:
/// This method is for objcective c. If you are using swift, please invoke unregisterOTAStatusListener instead
/// \param listener unregister listener.
///
- (void)unregisterOTAStatusListener_ObjcWithListener:(id <AirohaFOTAStatusListener_Objc> _Nonnull)listener;
- (BOOL)isProcessingRhoOrCommit SWIFT_WARN_UNUSED_RESULT;
@end

enum AirohaFotaError : NSInteger;

/// warning:
/// This listener is for objcective c. If you are using swift, please use AirohaFOTAStatusListener instead
SWIFT_PROTOCOL("_TtP10Airoha156229AirohaFOTAStatusListener_Objc_")
@protocol AirohaFOTAStatusListener_Objc
@optional
/// This is for objcective c used
/// warning:
/// This delegate is for objcective c. If you are using swift, please use onOTAStatusChanged(newStatus: AirohaOTAStatus) instead
/// \param newStatus ota status changed
///
/// \param error status fail error
///
- (void)onOTAStatusChangedWithNewStatus:(enum AirohaOTAStatus_Objc)newStatus error:(enum AirohaFotaError)error;
@required
/// \param progress progress changed. range is 0 ~ 1000, which means 0.0% ~ 100.0%
///
- (void)onTransferProgressChangedWithProgress:(NSInteger)progress;
/// \param current_stage current stage changed
///
- (void)onProgressStageChangedWithCurrent_stage:(NSString * _Nonnull)current_stage;
@end

typedef SWIFT_ENUM(NSInteger, AirohaFotaError, open) {
  AirohaFotaErrorSuccess = 0,
  AirohaFotaErrorTimeout = 1,
  AirohaFotaErrorGetResponseFail = 2,
  AirohaFotaErrorGenerateCmdFail = 3,
  AirohaFotaErrorLockCmdProxyFail = 4,
  AirohaFotaErrorErrorStatus = 5,
  AirohaFotaErrorBinFileInvalid = 6,
  AirohaFotaErrorClientBinFileInvalid = 7,
  AirohaFotaErrorNvrFileInvalid = 8,
  AirohaFotaErrorFotaPackageSizeInvalid = 9,
  AirohaFotaErrorBatteryTooLow = 10,
  AirohaFotaErrorClientIsNotExist = 11,
  AirohaFotaErrorResumeTableMissing = 12,
  AirohaFotaErrorCmdResponseUnexpected = 13,
  AirohaFotaErrorGetFotaInfoFail = 14,
  AirohaFotaErrorGetRofsVersionFail = 15,
  AirohaFotaErrorPeripheralConnectFail = 16,
  AirohaFotaErrorPeripheralDisconnected = 17,
  AirohaFotaErrorPeripheralConnectionTimeout = 18,
  AirohaFotaErrorWrongActions = 19,
  AirohaFotaErrorRoleSwitchFail = 20,
  AirohaFotaErrorCommitFail = 21,
  AirohaFotaErrorResetFail = 22,
  AirohaFotaErrorVerifyStateFail = 23,
/// app trigger cancel, but cancel command didnot success
  AirohaFotaErrorCancelFotaFail = 24,
/// app trigger cancel and cancel command get success response
  AirohaFotaErrorFotaCanceled = 25,
/// device trigger cancel but no reason
  AirohaFotaErrorFotaCanceled_BytDevice_NoReason = 26,
/// device trigger cancel because end user want to cancel
  AirohaFotaErrorFotaCanceled_ByDevice_UserTriggerCancel = 27,
/// device trigger cancel because something wrong
  AirohaFotaErrorFotaCanceled_ByDevice_Fail = 28,
/// device trigger cancel because timeout
  AirohaFotaErrorFotaCanceled_ByDevice_Timeout = 29,
/// device trigger cancel because partner loss
  AirohaFotaErrorFotaCanceled_ByDevice_PartnerLoss = 30,
/// device trigger cancel, but reason not defined
  AirohaFotaErrorFotaCanceled_ByDevice_ReasonNotDefined = 31,
  AirohaFotaErrorBluetoothIsNotPowerOn = 32,
  AirohaFotaErrorDisableAutoBootAfterResetFail = 33,
  AirohaFotaErrorFileSystemSha256NotMatch = 34,
  AirohaFotaErrorPingFotaCmdFailed = 35,
  AirohaFotaErrorQueryFotaInfoFailedAfterRHO = 36,
  AirohaFotaErrorRhoRepeatlyProcessManyTimes = 37,
  AirohaFotaErrorFotaNotCompleted = 38,
  AirohaFotaErrorFail = 39,
  AirohaFotaErrorReceiveSetMmiEnumRespDuringFota = 40,
  AirohaFotaErrorNone = 41,
};


SWIFT_CLASS("_TtC10Airoha156217AirohaGestureInfo")
@interface AirohaGestureInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SINGLE_TAP_LEFT;)
+ (NSInteger)SINGLE_TAP_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SINGLE_TAP_RIGHT;)
+ (NSInteger)SINGLE_TAP_RIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DOUBLE_TAP_LEFT;)
+ (NSInteger)DOUBLE_TAP_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DOUBLE_TAP_RIGHT;)
+ (NSInteger)DOUBLE_TAP_RIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LONG_PRESS_LEFT;)
+ (NSInteger)LONG_PRESS_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LONG_PRESS_RIGHT;)
+ (NSInteger)LONG_PRESS_RIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger TRIPLE_TAP_LEFT;)
+ (NSInteger)TRIPLE_TAP_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger TRIPLE_TAP_RIGHT;)
+ (NSInteger)TRIPLE_TAP_RIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DLONG_LEFT;)
+ (NSInteger)DLONG_LEFT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DLONG_RIGHT;)
+ (NSInteger)DLONG_RIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger LEFT_ALL;)
+ (NSInteger)LEFT_ALL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger RIGHT_ALL;)
+ (NSInteger)RIGHT_ALL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ALL;)
+ (NSInteger)ALL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ACTION_NONE;)
+ (NSInteger)ACTION_NONE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger VOLUME_UP;)
+ (NSInteger)VOLUME_UP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger VOLUME_DOWN;)
+ (NSInteger)VOLUME_DOWN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ANC;)
+ (NSInteger)ANC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PASS_THROUGH;)
+ (NSInteger)PASS_THROUGH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NEXT_TRACK;)
+ (NSInteger)NEXT_TRACK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PREVIOUS_TRACK;)
+ (NSInteger)PREVIOUS_TRACK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PLAY_PAUSE;)
+ (NSInteger)PLAY_PAUSE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SWITCH_ANC_AND_PASSTHRU;)
+ (NSInteger)SWITCH_ANC_AND_PASSTHRU SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_SIRI;)
+ (NSInteger)WAKE_UP_SIRI SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_SIRI_NOTIFY;)
+ (NSInteger)WAKE_UP_SIRI_NOTIFY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger GSOUND_CANCEL;)
+ (NSInteger)GSOUND_CANCEL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger GSOUND_NOTIFY;)
+ (NSInteger)GSOUND_NOTIFY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger GSOUND_QUERY;)
+ (NSInteger)GSOUND_QUERY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_ALEXA_TAP;)
+ (NSInteger)WAKE_UP_ALEXA_TAP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_ALEXA_HOLD;)
+ (NSInteger)WAKE_UP_ALEXA_HOLD SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_XIAOWEI_TAP;)
+ (NSInteger)WAKE_UP_XIAOWEI_TAP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_XIAOWEI_HOLD;)
+ (NSInteger)WAKE_UP_XIAOWEI_HOLD SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_XIAOAI_TAP;)
+ (NSInteger)WAKE_UP_XIAOAI_TAP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WAKE_UP_XIAOAI_HOLD;)
+ (NSInteger)WAKE_UP_XIAOAI_HOLD SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SWITCH_EQ;)
+ (NSInteger)SWITCH_EQ SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ACTION_DEFAULT;)
+ (NSInteger)ACTION_DEFAULT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SHARE_MODE_SWITCH;)
+ (NSInteger)SHARE_MODE_SWITCH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger SHARE_MODE_FOLLOWER_SWITCH;)
+ (NSInteger)SHARE_MODE_FOLLOWER_SWITCH SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     gestureId
///   </li>
///   <li>
///     0x01 - Single click on left;
///   </li>
///   <li>
///     0x02 - Single click on right;
///   </li>
///   <li>
///     0x03 - Double click on left;
///   </li>
///   <li>
///     0x04 - Double click on right;
///   </li>
///   <li>
///     0x05 - Long press on left;
///   </li>
///   <li>
///     0x06 - Long press on right;
///   </li>
///   <li>
///     0x07 - Triple click on left;
///   </li>
///   <li>
///     0x08 - Triple click on right;
///   </li>
///   <li>
///   </li>
///   <li>
///     …
///   </li>
///   <li>
///   </li>
/// </ul>
- (NSInteger)getGestureId SWIFT_WARN_UNUSED_RESULT;
- (void)setGestureIdWithGestureId:(NSInteger)gestureId;
/// <ul>
///   <li>
///     actionId
///   </li>
///   <li>
///     0x01 - Volume Up;
///   </li>
///   <li>
///     0x02 - Volume Down;
///   </li>
///   <li>
///     0x03 - ANC;
///   </li>
///   <li>
///     0x05 - Pass Through;
///   </li>
///   <li>
///     0x06 - Next Track
///   </li>
///   <li>
///     0x07 - Previous Track
///   </li>
///   <li>
///     0x08 - Play/Pause
///   </li>
///   <li>
///     0xa0 - Wake Up Siri
///   </li>
///   <li>
///   </li>
///   <li>
///   </li>
/// </ul>
- (NSInteger)getActionId SWIFT_WARN_UNUSED_RESULT;
- (void)setActionIdWithActionId:(NSInteger)actionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10Airoha156216AirohaGestureMsg")
@interface AirohaGestureMsg : AirohaBaseMsg
- (nonnull instancetype)initWithGestureInfoList:(NSArray<AirohaGestureInfo *> * _Nonnull)gestureInfoList OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end


/// A static, singleton class to intial library and get library log. Please do not create instances by yourself, instead, use the AirohaLogger.Inst to get the share instance.
/// There are some Modules in AirohaLibrary framework:
/// <ol>
///   <li>
///     AirohaSdkMgr.Inst.getAirohaConnector() / AirohaConnectionListener - Please Use this class to set the periperal to our library
///   </li>
///   <li>
///     AirohaSdkMgr.Inst.getDeviceControl(), getEQControl / AirohaDeviceListener - Send command and response.
///   </li>
///   <li>
///     AirohaSdkMgr.Inst.getFotaControl() / AirohaFOTAStatusListener - FOTA process.
///   </li>
/// </ol>
SWIFT_CLASS("_TtC10Airoha156212AirohaLogger")
@interface AirohaLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// initial AirohaLogger log setting
/// \param showDebuggingLog Bool, true: trun on framework debugging log. flase: turn off framework debugging log.
///
- (void)initialWithShowDebuggingLog:(BOOL)showDebuggingLog onError:(void (^ _Nullable)(NSString * _Nonnull))onError;
/// getFrameworkLogsPath - return framework log path array, client can export these log by email
/// .log is current using framework log
/// .bak.log is last time using framework log
- (NSArray<NSURL *> * _Nonnull)getFrameworkLogsPath SWIFT_WARN_UNUSED_RESULT;
- (void)setLogWithLog:(NSString * _Nonnull)log;
- (void)copyLog;
- (void)cleanLog;
@end

/// <ul>
///   <li>
///     enum of messages
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AirohaMessageID, open) {
  AirohaMessageIDUNKNOWN = -1,
/// <ul>
///   <li>
///     Device control request messages.
///   </li>
/// </ul>
  AirohaMessageIDDEVICE_LIST_INFO = 1001,
  AirohaMessageIDDEVICE_NAME = 1002,
  AirohaMessageIDANC_STATUS = 1003,
  AirohaMessageIDAUTO_PAUSE = 1004,
  AirohaMessageIDAUTO_POWER_OFF = 1005,
  AirohaMessageIDMULTI_AI_STATUS = 1006,
  AirohaMessageIDA2DP_STATUS = 1007,
  AirohaMessageIDFIND_ME_STATUS = 1008,
  AirohaMessageIDTWS_STATUS = 1009,
  AirohaMessageIDSEALING_STATUS = 1010,
  AirohaMessageIDGESTURE_STATUS = 1011,
  AirohaMessageIDSYNC_CRC_STATUS = 1012,
  AirohaMessageIDDEVICE_INFO = 1013,
  AirohaMessageIDBATTERY_STATUS = 1014,
  AirohaMessageIDIN_EAR_STATUS = 1015,
  AirohaMessageIDSMART_SWITCH_STATUS = 1016,
  AirohaMessageIDAUDIO_CHANNEL_STATUS = 1017,
  AirohaMessageIDSIDETONE_LEVEL = 1019,
  AirohaMessageIDSERIAL_NUMBER_STATUS = 1020,
  AirohaMessageIDFACTORY_RESET_STATUS = 1021,
  AirohaMessageIDCASE_VERSION = 1025,
  AirohaMessageIDMULTI_LANG_VOICE_PROMPT = 1040,
  AirohaMessageIDHOT_WORD_MODE = 1041,
  AirohaMessageIDCALL_STATUS = 1066,
  AirohaMessageIDSIDETONE_INFO = 1112,
  AirohaMessageIDSET_MULTI_LANG_STATUS = 1113,
  AirohaMessageIDADVANCED_ANC_STATUS = 1114,
  AirohaMessageIDSHUT_DOWN_DEVICE = 1115,
  AirohaMessageIDREQ_STANDBY_MODE = 1116,
  AirohaMessageIDSET_STANDBY_MODE = 1117,
  AirohaMessageIDTOUCH_STATUS = 1500,
  AirohaMessageIDSDK_INFO = 1501,
  AirohaMessageIDSHARE_MODE_STAUS = 1502,
  AirohaMessageIDADVANCED_PASSTHRU_STATUS = 1504,
  AirohaMessageIDFIRMWARE_STATUS = 1800,
  AirohaMessageIDROFS_STATUS = 1801,
/// <ul>
///   <li>
///     OTA control request messages. Start from 2001.
///   </li>
/// </ul>
  AirohaMessageIDFOTA_STATUS = 2001,
/// <ul>
///   <li>
///     EQ control request messages. Start from 3001.
///   </li>
/// </ul>
  AirohaMessageIDPEQ_INFO = 3001,
  AirohaMessageIDRUNNING_EQ_STATUS = 3002,
  AirohaMessageIDCOMBINED_EQ_STATUS = 3003,
  AirohaMessageIDREPLACE_EQ_STATUS = 3101,
  AirohaMessageIDRESET_EQ_STATUS = 3102,
};


SWIFT_CLASS("_TtC10Airoha156216AirohaMyBudsInfo")
@interface AirohaMyBudsInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger INVALID_STATUS;)
+ (NSInteger)INVALID_STATUS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger OFF;)
+ (NSInteger)OFF SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get left beeping status
///   </li>
///   <li>
///   </li>
///   <li>
///     <ul>
///       <li>
///         returns 0 means off, other positive digit is beep numbers, negative digit means invalid beeping
///       </li>
///     </ul>
///   </li>
/// </ul>
- (NSInteger)getLeftBeeping SWIFT_WARN_UNUSED_RESULT;
/// Set left beeping status
/// \param leftBeeping 0 means off, other positive digit is beep numbers, negative digit means invalid beeping
///
- (void)setLeftBeepingWithLeftBeeping:(NSInteger)leftBeeping;
/// <ul>
///   <li>
///     Get right beeping status
///   </li>
///   <li>
///   </li>
///   <li>
///     <ul>
///       <li>
///         returns 0 means off, other positive digit is beep numbers, negative digit means invalid beeping
///       </li>
///     </ul>
///   </li>
/// </ul>
- (NSInteger)getRightBeeping SWIFT_WARN_UNUSED_RESULT;
/// Set right beeping status
/// \param rightBeeping 0 means off, other positive digit is beep numbers, negative digit means invalid beeping
///
- (void)setRightBeepingWithRightBeeping:(NSInteger)rightBeeping;
/// Get left lighting status
/// <ul>
///   <li>
///     returns 0 means off, other positive digit is lighting numbers, negative digit means invalid lighting
///   </li>
/// </ul>
- (NSInteger)getLeftLighting SWIFT_WARN_UNUSED_RESULT;
/// Set master lighting status
/// \param leftLighting 0 means off, other positive digit is lighting numbers, negative digit means invalid lighting
///
- (void)setLeftLightingWithLeftLighting:(NSInteger)leftLighting;
/// <ul>
///   <li>
///     Get right lighting status
///   </li>
///   <li>
///   </li>
///   <li>
///     <ul>
///       <li>
///         returns  0 means off, other positive digit is lighting numbers, negative digit means invalid lighting
///       </li>
///     </ul>
///   </li>
/// </ul>
- (NSInteger)getRightLighting SWIFT_WARN_UNUSED_RESULT;
/// Set right lighting status
/// \param rightLighting 0 means off, other positive digit is lighting numbers, negative digit means invalid lighting
///
- (void)setRightLightingWithRightLighting:(NSInteger)rightLighting;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10Airoha156215AirohaMyBudsMsg")
@interface AirohaMyBudsMsg : AirohaBaseMsg
- (nonnull instancetype)initWithBudsInfo:(AirohaMyBudsInfo * _Nonnull)budsInfo OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (AirohaMyBudsInfo * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AirohaOTAChannel, open) {
  AirohaOTAChannelCHANNEL_UNKNOWN = -1,
  AirohaOTAChannelCHANNEL_APP = 0,
  AirohaOTAChannelCHANNEL_GOOGLE_AI = 1,
  AirohaOTAChannelCHANNEL_AMAZON_AI = 2,
  AirohaOTAChannelCHANNEL_XIAOWEI_AI = 3,
};


/// <ul>
///   <li>
///     Anc status definition
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156213AirohaOTAInfo")
@interface AirohaOTAInfo : NSObject
- (enum AirohaOTAChannel)getOtaChannel SWIFT_WARN_UNUSED_RESULT;
- (void)setOtaChannelWithOtaChannel:(enum AirohaOTAChannel)otaChannel;
/// warning:
/// This method is for objcective c. If you are using swift, please invoke getOtaStatus instead
- (enum AirohaOTAStatus_Objc)getOtaStatus_Objc SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Message to describe OTA info.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10Airoha156216AirohaOTAInfoMsg")
@interface AirohaOTAInfoMsg : AirohaBaseMsg
- (nonnull instancetype)initWithOtaInfo:(AirohaOTAInfo * _Nonnull)otaInfo OBJC_DESIGNATED_INITIALIZER;
- (enum AirohaMessageID)getMsgID SWIFT_WARN_UNUSED_RESULT;
- (AirohaOTAInfo * _Nonnull)getMsgContent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(enum AirohaMessageID)id :(NSObject * _Nonnull)content :(BOOL)push SWIFT_UNAVAILABLE;
@end

/// warning:
/// This enum is for objcective c.
typedef SWIFT_ENUM(NSInteger, AirohaOTAStatus_Objc, open) {
  AirohaOTAStatus_ObjcSTATUS_UNKNOWN = -1,
  AirohaOTAStatus_ObjcSTATUS_STARTED = 0,
  AirohaOTAStatus_ObjcSTATUS_CANCELED = 1,
  AirohaOTAStatus_ObjcSTATUS_FAILED = 2,
  AirohaOTAStatus_ObjcSTATUS_SUCCEED = 3,
  AirohaOTAStatus_ObjcSTATUS_REBOOT = 4,
  AirohaOTAStatus_ObjcSTATUS_READY_TO_UPDATE_FILESYSTEM = 5,
  AirohaOTAStatus_ObjcSTATUS_AUTO_REBOOT = 6,
};


SWIFT_CLASS("_TtC10Airoha156217AirohaROFSVersion")
@interface AirohaROFSVersion : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull agentRofsVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull partnerRofsVersion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getFsVersion SWIFT_WARN_UNUSED_RESULT;
- (void)copyFrom:(AirohaROFSVersion * _Nonnull)from;
- (void)reset;
@end

enum ChipType : NSInteger;
enum DeviceType : NSInteger;

/// Airoha Sdk Mgr: A singleton that used to control airoha sdk
SWIFT_CLASS("_TtC10Airoha156212AirohaSdkMgr")
@interface AirohaSdkMgr : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AirohaSdkMgr * _Nonnull Inst;)
+ (AirohaSdkMgr * _Nonnull)Inst SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// get current device’s chip type.
- (enum ChipType)getChipType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFotaRunning SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRoleSwitching SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPartnerExisting SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAgentRightSideDevice SWIFT_WARN_UNUSED_RESULT;
/// get current device’s project type.
- (enum DeviceType)getDeviceType SWIFT_WARN_UNUSED_RESULT;
/// get the instance to connect airoha device.
///
/// returns:
/// the instance of AirohaConnector
- (AirohaConnector * _Nonnull)getAirohaConnector SWIFT_WARN_UNUSED_RESULT;
/// get the instance to control device eq.
///
/// returns:
/// the instance of AirohaEQControl
- (id <AirohaEQControl> _Nonnull)getAirohaEQControl SWIFT_WARN_UNUSED_RESULT;
/// get the instance to control mmi, key releated function.
///
/// returns:
/// the instance of AirohaDeviceControl
- (id <AirohaDeviceControl> _Nonnull)getAirohaDeviceControl SWIFT_WARN_UNUSED_RESULT;
/// get the instance to control fota.
/// warning:
/// This method is for objcective c. If you are using swift, please invoke getAirohaFotaControl instead
///
/// returns:
/// the instance of AirohaFOTAControl_Objc
- (id <AirohaFOTAControl_Objc> _Nonnull)getAirohaFotaControl_Objc SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10Airoha156217AirohaSealingInfo")
@interface AirohaSealingInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger INVALID;)
+ (NSInteger)INVALID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NOT_READY;)
+ (NSInteger)NOT_READY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger READY;)
+ (NSInteger)READY SWIFT_WARN_UNUSED_RESULT;
/// Get left sealing status
///
/// returns:
/// <code>AirohaSealingInfo.NOT_READY</code> for not ready, <code>AirohaSealingInfo.READY</code> ready
- (NSInteger)getLeftSealing SWIFT_WARN_UNUSED_RESULT;
- (void)setLeftSealingWithLeftSealing:(NSInteger)leftSealing;
/// Get right sealing status
///
/// returns:
/// <code>AirohaSealingInfo.NOT_READY</code> for not ready, <code>AirohaSealingInfo.READY</code> ready
- (NSInteger)getRightSealing SWIFT_WARN_UNUSED_RESULT;
- (void)setRightSealingWithRightSealing:(NSInteger)rightSealing;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBUUID;

/// Airoha service uuid define, this is a singleton class, please donot create instance by your side.
/// There are Airoha default UUID
/// SERVICE UUID: “5052494D-2DAB-0341-6972-6F6861424C45”
/// Characteristic NOTIFY UUID: “43484152-2DAB-3141-6972-6F6861424C45”
/// Characteristic WRITE UUID : “43484152-2DAB-3241-6972-6F6861424C45”
/// If your project have different UUID, please invoke AirohaServices.Inst.setServiceCharacteristicUUIDs() to change uuid before invoke openBLE()
SWIFT_CLASS("_TtC10Airoha156214AirohaServices")
@interface AirohaServices : NSObject
/// Please using this share instance to set/get service uuid
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AirohaServices * _Nonnull Inst;)
+ (AirohaServices * _Nonnull)Inst SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Get Scan Service UUID
- (NSArray<CBUUID *> * _Nullable)getScanServiceUUIDs SWIFT_WARN_UNUSED_RESULT;
/// Get Command Service UUID String
- (NSString * _Nonnull)getCommandServiceUUIDString SWIFT_WARN_UNUSED_RESULT;
/// Get Tx Characteristic UUID String
- (NSString * _Nonnull)getTxCharacteristicUUIDString SWIFT_WARN_UNUSED_RESULT;
/// Get Rx Characteristic UUID String
- (NSString * _Nonnull)getRxCharacteristicUUIDString SWIFT_WARN_UNUSED_RESULT;
/// Default Command Service UUID = “5052494D-2DAB-0341-6972-6F6861424C45”
/// Default Write Characteristic UUID = “43484152-2DAB-3241-6972-6F6861424C45”
/// Default Notify/Indication Characteristic UUID = “43484152-2DAB-3141-6972-6F6861424C45”
/// If you want to modify the UUID, please invoke this API first before you call anyother functions.
- (void)setServiceCharacteristicUUIDsWithServiceUUID:(CBUUID * _Nonnull)serviceUUID writeCharacteristicUUID:(CBUUID * _Nonnull)writeCharacteristicUUID notifyIndicationCharacteristicUUID:(CBUUID * _Nonnull)notifyIndicationCharacteristicUUID;
/// Default Scan Service UUIDs = [CBUUID(“5052494D-2DAB-0341-6972-6F6861424C45”)]
/// If you want to modify the UUID, please invoke this API first before you call anyother functions.
- (void)setScanServiceUUIDsWithUuids:(NSArray<CBUUID *> * _Nullable)uuids;
/// please add client defined serivce and characteristic before call ConnectivityModule.Inst.openBLE()
/// \param serviceUUID string of serivce uuid
///
/// \param charUUID string of characteristic uuid
///
- (void)addSupportServiceAndCharacteristicWithServiceUUID:(NSString * _Nonnull)serviceUUID charUUID:(NSString * _Nonnull)charUUID;
@end

enum ShareModeState : NSInteger;

/// ShareMode info
SWIFT_CLASS("_TtC10Airoha156219AirohaShareModeInfo")
@interface AirohaShareModeInfo : NSObject
- (nonnull instancetype)initWithState:(enum ShareModeState)state OBJC_DESIGNATED_INITIALIZER;
- (enum ShareModeState)getShareModeState SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ShareModeState, open) {
  ShareModeStateSTATE_SET_SUCCESS = -1,
  ShareModeStateSTATE_NORMAL = 0,
  ShareModeStateSTATE_PREPAIRING = 1,
  ShareModeStateSTATE_SHARING = 2,
  ShareModeStateSTATE_LEAVING = 3,
};


/// Delegate wrapper for forwarding CBCentralManagerDelegate.
SWIFT_CLASS("_TtC10Airoha156229CentralManagerDelegateWrapper")
@interface CentralManagerDelegateWrapper : NSObject <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central willRestoreState:(NSDictionary<NSString *, id> * _Nonnull)dict;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central connectionEventDidOccur:(CBConnectionEvent)event forPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didUpdateANCSAuthorizationForPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Device chip type
typedef SWIFT_ENUM(NSInteger, ChipType, open) {
  ChipTypeAB155x = 0,
  ChipTypeAB1562 = 1,
  ChipTypeAB1568 = 2,
  ChipTypeAB1562E = 11,
  ChipTypeAB1565_DUAL = 21,
  ChipTypeAB1568_DUAL = 22,
};

@protocol ConnectivityModuleDelegate;

/// A static, singleton class to handle BLE peripheral. Please do not create instances by yourself, instead, use the ConnectivityModule.Inst to get the share instance. And don’t forget to register the callback (registerListener) in your delegate class.
SWIFT_CLASS("_TtC10Airoha156218ConnectivityModule")
@interface ConnectivityModule : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ConnectivityModule * _Nonnull Inst;)
+ (ConnectivityModule * _Nonnull)Inst SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)registerListenerWithName:(NSString * _Nonnull)name delegate:(id <ConnectivityModuleDelegate> _Nonnull)delegate;
- (void)unregisterListenerWithName:(NSString * _Nonnull)name;
@end

@class CBCharacteristic;
@class EASession;

/// The ConnectivityModuleDelegate protocol defines the peripheral job delegate here.
SWIFT_PROTOCOL("_TtP10Airoha156226ConnectivityModuleDelegate_")
@protocol ConnectivityModuleDelegate
/// A delegate function, tells the delegate there is discovered characteristic, and ready to control Bluetooth devices by BLE now
- (void)bleFoundCharacteristicWithPeripheral:(CBPeripheral * _Nonnull)peripheral charList:(NSArray<CBCharacteristic *> * _Nonnull)charList discoverAllSupportedService:(BOOL)discoverAllSupportedService;
@optional
/// A delegate function, tells the delegate library is ready to control Bluetooth devices by L2CAP now
- (void)l2capOpenChannelWithPeripheral:(CBPeripheral * _Nonnull)peripheral result:(BOOL)result;
- (void)iap2OpenChannelWithSession:(EASession * _Nonnull)session result:(BOOL)result;
@end

/// The MCSync project has agent/partner roles for device
typedef SWIFT_ENUM(uint8_t, DEVICE_ROLE, open) {
  DEVICE_ROLEAgent = 0x00,
  DEVICE_ROLEPartner = 0x01,
};

/// Earbuds or Headset project
typedef SWIFT_ENUM(NSInteger, DeviceType, open) {
  DeviceTypeHeadset = 0,
  DeviceTypeEarbuds = 1,
  DeviceTypeUnKnown = 2,
};






enum FotaType : NSInteger;
enum FotaMode : NSInteger;

/// FotaSettings: A paramter in startDataTransfer which used to config fota settings.
/// User can specify the following settings.
/// <ol>
///   <li>
///     fota type: typical or special upgrade (upgrade filesystem when using 2M flash)
///   </li>
///   <li>
///     fota target: single fota or dual fota
///   </li>
///   <li>
///     ota bin path
///   </li>
///   <li>
///     battery level threshold (default using 50. If battery level less than 50%, lib will callback fail)
///   </li>
///   <li>
///     using background fota
///   </li>
/// </ol>
SWIFT_CLASS("_TtC10Airoha156212FotaSettings")
@interface FotaSettings : NSObject
- (nonnull instancetype)initWithFotaType:(enum FotaType)fotaType fotaTarget:(enum FotaTarget)fotaTarget binFilePath:(NSString * _Nonnull)binFilePath;
- (nonnull instancetype)initWithFotaType:(enum FotaType)fotaType fotaTarget:(enum FotaTarget)fotaTarget fotaMode:(enum FotaMode)fotaMode leftBinFilePath:(NSString * _Nonnull)leftBinFilePath rightBinFilePath:(NSString * _Nonnull)rightBinFilePath OBJC_DESIGNATED_INITIALIZER;
- (enum FotaType)getFotaType SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getRightBinFilePath SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLeftBinFilePath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getBatteryLevelThrd SWIFT_WARN_UNUSED_RESULT;
/// default will be 50 if you did not specify this setting. So if battery level below 50%, lib will delegate ota fail.
- (void)setBatteryLevelThrd:(NSInteger)batteryLevelThrd;
- (BOOL)isBackgroundFota SWIFT_WARN_UNUSED_RESULT;
/// default will be active fota if you did not specify this setting.
- (void)setBackgroundFota:(BOOL)backgroundFota;
- (enum FotaMode)getFotaMode SWIFT_WARN_UNUSED_RESULT;
- (void)setFotaModeWithFotaMode:(enum FotaMode)fotaMode;
- (NSInteger)getPartialReadFlashLengthKB SWIFT_WARN_UNUSED_RESULT;
- (void)setPartialReadFlashLengthKBWithPartialReadFlashLengthKB:(NSInteger)partialReadFlashLengthKB;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FotaType, open) {
  FotaTypeTypical = 0,
  FotaTypeSpecialUpgrade = 1,
};

typedef SWIFT_ENUM(NSInteger, FotaTarget, open) {
  FotaTargetSingle = 0,
  FotaTargetDual = 1,
};

typedef SWIFT_ENUM(NSInteger, FotaMode, open) {
  FotaModeActive = 0,
  FotaModeBackground = 1,
  FotaModeAdaptive = 2,
};


@class CBService;
@class CBDescriptor;
@class CBL2CAPChannel;

/// Delegate wrapper for forwarding CBPeripheralDelegate.
SWIFT_CLASS("_TtC10Airoha156225PeripheralDelegateWrapper")
@interface PeripheralDelegateWrapper : NSObject <CBPeripheralDelegate>
- (void)peripheralDidUpdateName:(CBPeripheral * _Nonnull)peripheral;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didModifyServices:(NSArray<CBService *> * _Nonnull)invalidatedServices;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didReadRSSI:(NSNumber * _Nonnull)RSSI error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverIncludedServicesForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverDescriptorsForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForDescriptor:(CBDescriptor * _Nonnull)descriptor error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForDescriptor:(CBDescriptor * _Nonnull)descriptor error:(NSError * _Nullable)error;
- (void)peripheralIsReadyToSendWriteWithoutResponse:(CBPeripheral * _Nonnull)peripheral;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didOpenL2CAPChannel:(CBL2CAPChannel * _Nullable)channel error:(NSError * _Nullable)error SWIFT_AVAILABILITY(ios,introduced=11.0);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// OTA configuration API. (deprecated)
SWIFT_CLASS("_TtC10Airoha156215RemoteOTAConfig")
@interface RemoteOTAConfig : NSObject
/// Get PID. Remote OTA configuration is identified by PID.
/// @return
- (NSString * _Nonnull)getPid SWIFT_WARN_UNUSED_RESULT;
/// @see #getPid()
/// @param pid
- (void)setPidWithPid:(NSString * _Nonnull)pid;
/// Get firmware version defined in remote configuration.
/// @return
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
/// @see #getVersion()
/// @param version
- (void)setVersionWithVersion:(NSString * _Nonnull)version;
/// Get OTA download URL defined in remote configuration.
/// @return
- (NSString * _Nonnull)getDownloadUrl SWIFT_WARN_UNUSED_RESULT;
/// @see #getDownloadUrl()
/// @param downloadUrl
- (void)setDownloadUrlWithDownloadUrl:(NSString * _Nonnull)downloadUrl;
/// Local path that ScanManager downloads and store the latest firmware.
/// @return
- (NSString * _Nonnull)getLocalPath SWIFT_WARN_UNUSED_RESULT;
/// @see #getLocalPath()
/// @param localPath
- (void)setLocalPathWithLocalPath:(NSString * _Nonnull)localPath;
/// Get firmware MD5 checksum defined in remote configuration.
/// @return
- (NSString * _Nonnull)getCheckSum SWIFT_WARN_UNUSED_RESULT;
/// @see #getCheckSum()
/// @param checkSum
- (void)setCheckSumWithCheckSum:(NSString * _Nonnull)checkSum;
/// Get What’s New title for specific language.
/// @param locale
/// @return
- (NSString * _Nonnull)getWhatsNewTitle SWIFT_WARN_UNUSED_RESULT;
/// @see #getWhatsNewTitle(String)
/// @param whatsNewTitle
- (void)setWhatsNewTitleWithWhatsNewTitle:(NSString * _Nonnull)whatsNewTitle;
/// Get What’s New content for specific language.
/// @param locale
/// @return
- (NSString * _Nonnull)getWhatsNewContent SWIFT_WARN_UNUSED_RESULT;
/// @see #getWhatsNewContent(String)
/// @param whatsNewContent
- (void)setWhatsNewContentWithWhatsNewContent:(NSString * _Nonnull)whatsNewContent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(uint8_t, SAMPLE_RATE, open) {
  SAMPLE_RATESR32 = 0x00,
  SAMPLE_RATESR44_1 = 0x01,
  SAMPLE_RATESR48 = 0x02,
  SAMPLE_RATESR16 = 0x03,
  SAMPLE_RATESR08 = 0x04,
  SAMPLE_RATESR88_2 = 0x05,
  SAMPLE_RATESR96 = 0x06,
};


SWIFT_CLASS("_TtC10Airoha156212SideToneInfo")
@interface SideToneInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, StatusCode, open) {
  StatusCodeSTATUS_UNKNOWN = -1,
  StatusCodeSTATUS_SUCCESS = 0,
  StatusCodeSTATUS_TIMEOUT = 1,
  StatusCodeSTATUS_CANCEL = 2,
  StatusCodeSTATUS_FAIL = 3,
};


SWIFT_CLASS("_TtC10Airoha15629TlvFormat")
@interface TlvFormat : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(uint8_t)type length:(uint16_t)length OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
